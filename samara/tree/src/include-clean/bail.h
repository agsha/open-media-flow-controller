/*
 *
 * bail.h
 *
 *
 *
 */

#ifndef __BAIL_H_
#define __BAIL_H_


#ifdef __cplusplus
extern "C" {
#endif
#if 0 /* for emacs */
}
#endif

#include "errors.h"
#include "logging.h"
#include <errno.h>
#include <string.h>    /* for strerror() */

/* ------------------------------------------------------------------------- */
/** \file bail.h Exception handling macros.
 * \ingroup lc
 *
 * These macros are intended to catch and handle a variety of
 * exceptional conditions and programming errors.
 *
 * They can be triggered on any of four conditions:
 * \li An error code passed is nonzero (indicating an error condition)
 * \li A pointer passed is NULL
 * \li A boolean condition passed is false (to be used instead of assert())
 * \li Always
 *
 * All of these except the first one set an error code variable, which
 * must be named \c err by convention, to an error code reflecting the
 * condition which failed.  The last one allows any error code to be
 * specified.  The middle two are effectively the same macros, except
 * for the error code which they set if their condition is not met.
 *
 * The macros can perform one or both of the following actions:
 * \li Log an error (in a variety of formats)
 * \li Jump to a \c bail label at the end of your function, to cleanup
 *     and return immediately.
 *
 * The log messages generated by the macros can take one of three forms:
 * \li A boilerplate message containing the meaning of the error code
 * \li A custom message, formatted printf-style.
 * \li A custom message plus the results of strerror(errno), for 
 *     use after library functions which set errno on error.
 *     Note that when you use these variants, your format string when
 *     rendered with its additional parameters will be truncated at
 *     __MAX_MSG_LEN bytes, as they are rendered into a fixed 
 *     length buffer.
 *
 * The macros which do log errors are intended to catch internal
 * programming errors.  They log messages targetted at developers.
 * They all call bail_debug(), a dummy function which does nothing, so
 * the developer can set a breakpoint there in gdb and stop execution
 * whenever an internal error occurs.
 *
 * The macros which do not log errors are intended to handle
 * exceptional conditions which require a premature return from the
 * current function.  These macros call bail_quiet_debug(), another
 * dummy function that serves the same purpose as bail_debug().
 * It is separate because the developer may want to stop only at
 * internal errors.
 *
 * NOTE: in some cases the macros refer to their arguments more than
 * once, so the arguments should not include function calls that are
 * not idempotent.
 *
 * The following table summarizes the actions of the macros available.
 * The last column shows which variants of the macro class are
 * available, using these codes:
<ol>
<li>error (if error code is nonzero)
<li>null (if pointer is NULL)
<li>error_null (same as #1 and #2 in series)
<li>require (if condition passed is false)
<li>force (always, using error code specified)
</ol>
\verbatim

                   Bail?  Log standard  Log custom   Log message w/
                          message?      message      strerror(errno)   x?   
                   -----  ------------  ----------   ---------------  -----
bail_x              yes       yes(*)                                  12345
bail_x_errno        yes                    yes             yes        1234
bail_x_msg          yes                    yes(*)                     12345
bail_x_quiet        yes                                               12345
complain_x                    yes                                     1234
complain_x_errno                           yes             yes        1234
complain_x_msg                             yes                        1234

(*): in the variant where x is "error" or "error_null", if the err
variable contains lc_err_cancelled, no message is logged.

\endverbatim
*/

/*
 * XXX/EMT To Do:
 *   - Make bail and complain macros say whether they're bailing out or not.
 *   - Use an lc_enum_to_string variant that just returns a question mark
 *     instead of something alarming like "ERROR-NO-MAP", and then don't do
 *     the 'if' test for each one.
 */

#define __MAX_MSG_LEN 512


/* 
 * On Linux / glibc with _GNU_SOURCE defined, <string.h> has a
 * different, and non-standard prototype for strerror_r() . We define
 * "strerror_r_posix()" to always get the SUSv3 version.  The standard
 * version returns an 'int' (0 on success), the GNU version returns a
 * pointer to the string (which is also the second argument).
 */

#undef strerror_r_posix
#define strerror_r_posix strerror_r

#if defined(PROD_TARGET_OS_LINUX) && defined(_GNU_SOURCE)

#undef strerror_r_posix
extern int __xpg_strerror_r(int, char *, size_t);
#define strerror_r_posix __xpg_strerror_r

#endif /* PROD_TARGET_OS_LINUX && _GNU_SOURCE */

/*
 * We use this in preference to NULL, for comparison in our macros
 * below, for the sake of better typechecking in C++.  This matches
 * the definition in C (from /usr/include/linux/stddef.h); but in
 * C++, NULL is defined as simply 0, presumably in order to permit
 * assignment to a pointer without a cast.  This would have permitted
 * non-pointers to be used with bail_null() et al., which we don't
 * want to permit.
 */
#define TMS_C_NULL ((void *)0)

#define BAIL_SRC_LOCATION_ARGS __FUNCTION__, __FILE__, __LINE__

/* ------------------------------------------------------------------------- */
#define bail_error_maybe_quiet(error, quiet_if_code)                         \
    do {                                                                     \
        if (error) {                                                         \
            if ((error) != (quiet_if_code) && (error) != lc_err_cancelled) { \
                bail_log_error(BAIL_SRC_LOCATION_ARGS, (error));             \
                bail_debug();                                                \
            }                                                                \
            else {                                                           \
                bail_quiet_debug();                                          \
            }                                                                \
            goto bail;                                                       \
        }                                                                    \
    } while (0)

/* Like bail_error_maybe_quiet() without implicit lc_err_cancelled check */
/* ------------------------------------------------------------------------- */
#define bail_error_maybe_quiet_exact(error, quiet_if_code)                   \
    do {                                                                     \
        if (error) {                                                         \
            if ((error) != (quiet_if_code)) {                                \
                bail_log_error(BAIL_SRC_LOCATION_ARGS, (error));             \
                bail_debug();                                                \
            }                                                                \
            else {                                                           \
                bail_quiet_debug();                                          \
            }                                                                \
            goto bail;                                                       \
        }                                                                    \
    } while (0)

/* ------------------------------------------------------------------------- */
#define bail_error(error)                                                    \
    do {                                                                     \
        bail_error_maybe_quiet_exact((error), lc_err_cancelled);             \
    } while (0)

/* ------------------------------------------------------------------------- */
#define bail_error_errno(error, format, ...)                                 \
    do {                                                                     \
        if (error) {                                                         \
            bail_log_errno(BAIL_SRC_LOCATION_ARGS,                           \
                           format, ## __VA_ARGS__);                          \
            bail_debug();                                                    \
            goto bail;                                                       \
        }                                                                    \
    } while (0)

/* ------------------------------------------------------------------------- */
#define bail_error_msg_maybe_quiet(error, quiet_if_code, format, ...)        \
    do {                                                                     \
        if (error) {                                                         \
            if ((error) != (quiet_if_code) && (error) != lc_err_cancelled) { \
                lc_log_debug(LOG_ERR, format, ## __VA_ARGS__);               \
                bail_debug();                                                \
            }                                                                \
            else {                                                           \
                bail_quiet_debug();                                          \
            }                                                                \
            goto bail;                                                       \
        }                                                                    \
    } while (0)

/* Like bail_error_msg_maybe_quiet() without implicit lc_err_cancelled check */
/* ------------------------------------------------------------------------- */
#define bail_error_msg_maybe_quiet_exact(error, quiet_if_code, format, ...)  \
    do {                                                                     \
        if (error) {                                                         \
            if ((error) != (quiet_if_code)) {                                \
                lc_log_debug(LOG_ERR, format, ## __VA_ARGS__);               \
                bail_debug();                                                \
            }                                                                \
            else {                                                           \
                bail_quiet_debug();                                          \
            }                                                                \
            goto bail;                                                       \
        }                                                                    \
    } while (0)

/* ------------------------------------------------------------------------- */
#define bail_error_msg(error, format, ...)                                   \
    do {                                                                     \
        bail_error_msg_maybe_quiet_exact((error), lc_err_cancelled, format,  \
                                   ## __VA_ARGS__);                          \
    } while(0)

/* ------------------------------------------------------------------------- */
#define bail_error_msg_local(error, label, format, ...)                      \
    do {                                                                     \
        if (error) {                                                         \
            if ((error) != lc_err_cancelled) {                               \
                lc_log_debug(LOG_ERR, format, ## __VA_ARGS__);               \
                bail_debug();                                                \
            }                                                                \
            else {                                                           \
                bail_quiet_debug();                                          \
            }                                                                \
            goto label;                                                      \
        }                                                                    \
    } while (0)

/* ------------------------------------------------------------------------- */
#define bail_error_quiet(error)                                              \
    do {                                                                     \
        if (error) {                                                         \
            bail_quiet_debug();                                              \
            goto bail;                                                       \
        }                                                                    \
    } while (0)

/* ------------------------------------------------------------------------- */
#define complain_error(error)                                                \
    do {                                                                     \
        if (error) {                                                         \
            bail_log_error(BAIL_SRC_LOCATION_ARGS, (error));                 \
            bail_debug();                                                    \
        }                                                                    \
    } while (0)

/* ------------------------------------------------------------------------- */
/* Like complain_error(), except that if err is lc_err_cancelled, we
 * silently goto bail.
 */
#define complain_error_cancelled(error)                                      \
    do {                                                                     \
        if (error) {                                                         \
            if ((error) == lc_err_cancelled) {                               \
                bail_quiet_debug();                                          \
                goto bail;                                                   \
            }                                                                \
            bail_log_error(BAIL_SRC_LOCATION_ARGS, (error));                 \
            bail_debug();                                                    \
        }                                                                    \
    } while (0)

/* ------------------------------------------------------------------------- */
/** The intention of this variation on complain_error() is that you might
 * want to not bail out when you get an error, but still remember that
 * you got an error and return it when you would return naturally.
 * The error we find in 'error', if any, is saved in save_error but then
 * zeroed out.
 */
#define complain_save_error(error, save_error)                               \
    do {                                                                     \
        if (error) {                                                         \
            bail_log_error(BAIL_SRC_LOCATION_ARGS, error);                   \
            save_error = error;                                              \
            error = 0;                                                       \
            bail_debug();                                                    \
        }                                                                    \
    } while (0)

/* ------------------------------------------------------------------------- */
#define complain_error_errno(error, format, ...)                             \
    do {                                                                     \
        if (error) {                                                         \
            bail_log_errno(BAIL_SRC_LOCATION_ARGS,                           \
                           format, ## __VA_ARGS__);                          \
            bail_debug();                                                    \
        }                                                                    \
    } while (0)

/* ------------------------------------------------------------------------- */
#define complain_error_msg(error, format, ...)                               \
    do {                                                                     \
        if (error) {                                                         \
            lc_log_debug(LOG_ERR, format, ## __VA_ARGS__);                   \
            bail_debug();                                                    \
        }                                                                    \
    } while (0)

/* ------------------------------------------------------------------------- */
#define bail_null(ptr)                                                       \
    do {                                                                     \
        if ((ptr) == TMS_C_NULL) {                                           \
            err = lc_err_unexpected_null;                                    \
            bail_log_null(BAIL_SRC_LOCATION_ARGS);                           \
            bail_debug();                                                    \
            goto bail;                                                       \
        }                                                                    \
    } while (0)

#ifdef PROD_FEATURE_JAVA
/* ------------------------------------------------------------------------- */
/* Bail if a pointer is NULL, or if a Java exception occurred.
 * Check for the Java exception first, because if there is an 
 * exception outstanding, it may describe in greater detail
 * what went wrong than an "unexpected NULL", so we don't want to
 * overwrite it with our own exception, which we will throw if we 
 * get to the bail clause and err is not already lc_err_java_exception.
 *
 * XXXX/EMT: this and other _jex variants should extract a description
 * of the exception and log it, a la java_maybe_catch_exception().
 */
#define bail_null_jex(ptr, env)                                              \
    do {                                                                     \
        if ((*env)->ExceptionCheck(env)) {                                   \
            err = lc_err_java_exception;                                     \
            lc_log_debug(LOG_ERR, "Java exception occurred");                \
            bail_debug();                                                    \
            goto bail;                                                       \
        }                                                                    \
        if ((ptr) == TMS_C_NULL) {                                           \
            err = lc_err_unexpected_null;                                    \
            lc_log_debug(LOG_ERR, "Unexpected NULL");                        \
            bail_debug();                                                    \
            goto bail;                                                       \
        }                                                                    \
    } while (0)

#define bail_null_jex_msg(ptr, env, format, ...)                             \
    do {                                                                     \
        if ((*env)->ExceptionCheck(env)) {                                   \
            err = lc_err_java_exception;                                     \
            lc_log_debug(LOG_ERR, "Java exception occurred: "                \
                         format, ## __VA_ARGS__);                            \
            bail_debug();                                                    \
            goto bail;                                                       \
        }                                                                    \
        if ((ptr) == TMS_C_NULL) {                                           \
            err = lc_err_unexpected_null;                                    \
            lc_log_debug(LOG_ERR, "Unexpected NULL: "                        \
                         format, ## __VA_ARGS__);                            \
            bail_debug();                                                    \
            goto bail;                                                       \
        }                                                                    \
    } while (0)

#define bail_jex(env)                                                        \
    do {                                                                     \
        if ((*env)->ExceptionCheck(env)) {                                   \
            err = lc_err_java_exception;                                     \
            lc_log_debug(LOG_ERR, "Java exception occurred");                \
            bail_debug();                                                    \
            goto bail;                                                       \
        }                                                                    \
    } while (0)

#endif /* PROD_FEATURE_JAVA */

/* ------------------------------------------------------------------------- */
#define bail_null_errno(ptr, format, ...)                                    \
    do {                                                                     \
        if ((ptr) == TMS_C_NULL) {                                           \
            err = lc_err_unexpected_null;                                    \
            bail_log_errno(BAIL_SRC_LOCATION_ARGS,                           \
                           format, ## __VA_ARGS__);                          \
            bail_debug();                                                    \
            goto bail;                                                       \
        }                                                                    \
    } while (0)

/* ------------------------------------------------------------------------- */
#define bail_null_msg(ptr, format, ...)                                      \
    do {                                                                     \
        if ((ptr) == TMS_C_NULL) {                                           \
            err = lc_err_unexpected_null;                                    \
            lc_log_debug(LOG_ERR, format, ## __VA_ARGS__);                   \
            bail_debug();                                                    \
            goto bail;                                                       \
        }                                                                    \
    } while (0)

/* ------------------------------------------------------------------------- */
#define bail_null_quiet(ptr)                                                 \
    do {                                                                     \
        if ((ptr) == TMS_C_NULL) {                                           \
            err = lc_err_unexpected_null;                                    \
            bail_quiet_debug();                                              \
            goto bail;                                                       \
        }                                                                    \
    } while (0)

/* ------------------------------------------------------------------------- */
#define complain_null(ptr)                                                   \
    do {                                                                     \
        if ((ptr) == TMS_C_NULL) {                                           \
            bail_log_null(BAIL_SRC_LOCATION_ARGS);                           \
            bail_debug();                                                    \
        }                                                                    \
    } while (0)

/* ------------------------------------------------------------------------- */
#define complain_null_errno(ptr, format, ...)                                \
    do {                                                                     \
        if ((ptr) == TMS_C_NULL) {                                           \
            bail_log_errno(BAIL_SRC_LOCATION_ARGS,                           \
                           format, ## __VA_ARGS__);                          \
            bail_debug();                                                    \
        }                                                                    \
    } while (0)

/* ------------------------------------------------------------------------- */
#define complain_null_msg(ptr, format, ...)                                  \
    do {                                                                     \
        if ((ptr) == TMS_C_NULL) {                                           \
            lc_log_debug(LOG_ERR, format, ## __VA_ARGS__);                   \
            bail_debug();                                                    \
        }                                                                    \
    } while (0)

/* ------------------------------------------------------------------------- */
#define bail_error_require(error, cond)                                      \
    do {                                                                     \
        bail_error((error));                                                 \
        bail_require((cond));                                                \
    } while (0)

/* ------------------------------------------------------------------------- */
#define bail_error_null(error, ptr)                                          \
    do {                                                                     \
        bail_error((error));                                                 \
        bail_null((ptr));                                                    \
    } while (0)

/* ------------------------------------------------------------------------- */
#define bail_error_null_errno(error, ptr, format, ...)                       \
    do {                                                                     \
        bail_error_errno((error), format, ## __VA_ARGS__);                   \
        bail_null_errno((ptr), format, ## __VA_ARGS__);                      \
    } while (0)

/* ------------------------------------------------------------------------- */
#define bail_error_null_msg(error, ptr, format, ...)                         \
    do {                                                                     \
        bail_error_msg((error), format, ## __VA_ARGS__);                     \
        bail_null_msg((ptr), format, ## __VA_ARGS__);                        \
    } while (0)

/* ------------------------------------------------------------------------- */
#define bail_error_null_quiet(error, ptr)                                    \
    do {                                                                     \
        bail_error_quiet((error));                                           \
        bail_null_quiet((ptr));                                              \
    } while (0)

/* ------------------------------------------------------------------------- */
#define complain_error_null(error, ptr)                                      \
    do {                                                                     \
        complain_error((error));                                             \
        complain_null((ptr));                                                \
    } while (0)

/* ------------------------------------------------------------------------- */
#define complain_error_null_errno(error, ptr, format, ...)                   \
    do {                                                                     \
        complain_error_errno((error), format, ## __VA_ARGS__);               \
        complain_null_errno((ptr), format, ## __VA_ARGS__);                  \
    } while (0)

/* ------------------------------------------------------------------------- */
#define complain_error_null_msg(error, ptr, format, ...)                     \
    do {                                                                     \
        complain_error_msg((error), format, ## __VA_ARGS__);                 \
        complain_null_msg((ptr), format, ## __VA_ARGS__);                    \
    } while (0)

/* ------------------------------------------------------------------------- */
#define bail_require(cond)                                                   \
    do {                                                                     \
        if (!(cond)) {                                                       \
            err = lc_err_assertion_failed;                                   \
            bail_log_required(BAIL_SRC_LOCATION_ARGS);                       \
            bail_debug();                                                    \
            goto bail;                                                       \
        }                                                                    \
    } while (0)

/* ------------------------------------------------------------------------- */
#define bail_require_errno(cond, format, ...)                                \
    do {                                                                     \
        if (!(cond)) {                                                       \
            err = lc_err_assertion_failed;                                   \
            bail_log_errno(BAIL_SRC_LOCATION_ARGS,                           \
                           format, ## __VA_ARGS__);                          \
            bail_debug();                                                    \
            goto bail;                                                       \
        }                                                                    \
    } while (0)

/* ------------------------------------------------------------------------- */
#define bail_require_msg(cond, format, ...)                                  \
    do {                                                                     \
        if (!(cond)) {                                                       \
            err = lc_err_assertion_failed;                                   \
            lc_log_debug(LOG_ERR, format, ## __VA_ARGS__);                   \
            bail_debug();                                                    \
            goto bail;                                                       \
        }                                                                    \
    } while (0)

/* ------------------------------------------------------------------------- */
#define bail_require_msg_local(cond, label, format, ...)                     \
    do {                                                                     \
        if (!(cond)) {                                                       \
            err = lc_err_assertion_failed;                                   \
            lc_log_debug(LOG_ERR, format, ## __VA_ARGS__);                   \
            bail_debug();                                                    \
            goto label;                                                      \
        }                                                                    \
    } while (0)

/* ------------------------------------------------------------------------- */
#define bail_require_msg_custom(cond, error, format, ...)                    \
    do {                                                                     \
        if (!(cond)) {                                                       \
            err = (error);                                                   \
            lc_log_debug(LOG_ERR, format, ## __VA_ARGS__);                   \
            bail_debug();                                                    \
            goto bail;                                                       \
        }                                                                    \
    } while (0)

/* ------------------------------------------------------------------------- */
#define bail_require_quiet(cond)                                             \
    do {                                                                     \
        if (!(cond)) {                                                       \
            err = lc_err_assertion_failed;                                   \
            bail_quiet_debug();                                              \
            goto bail;                                                       \
        }                                                                    \
    } while (0)

/* ------------------------------------------------------------------------- */
#define bail_require_quiet_custom(cond, error)                               \
    do {                                                                     \
        if (!(cond)) {                                                       \
            err = (error);                                                   \
            bail_quiet_debug();                                              \
            goto bail;                                                       \
        }                                                                    \
    } while (0)

/* ------------------------------------------------------------------------- */
#define complain_require(cond)                                               \
    do {                                                                     \
        if (!(cond)) {                                                       \
            bail_log_required(BAIL_SRC_LOCATION_ARGS);                       \
            bail_debug();                                                    \
        }                                                                    \
    } while (0)

/* ------------------------------------------------------------------------- */
#define complain_require_errno(cond, format, ...)                            \
    do {                                                                     \
        if (!(cond)) {                                                       \
            bail_log_errno(BAIL_SRC_LOCATION_ARGS,                           \
                           format, ## __VA_ARGS__);                          \
            bail_debug();                                                    \
        }                                                                    \
    } while (0)

/* ------------------------------------------------------------------------- */
#define complain_require_msg(cond, format, ...)                              \
    do {                                                                     \
        if (!(cond)) {                                                       \
            lc_log_debug(LOG_ERR, format, ## __VA_ARGS__);                   \
            bail_debug();                                                    \
        }                                                                    \
    } while (0)

/* ------------------------------------------------------------------------- */
#define bail_force(error)                                                    \
    do {                                                                     \
        err = (error);                                                       \
        bail_log_force(BAIL_SRC_LOCATION_ARGS, err);                         \
        bail_debug();                                                        \
        goto bail;                                                           \
    } while (0)

/* ------------------------------------------------------------------------- */
#define bail_force_msg(error, format, ...)                                   \
    do {                                                                     \
        if (true) {                                                          \
            err = (error);                                                   \
            lc_log_debug(LOG_ERR, format, ## __VA_ARGS__);                   \
            bail_debug();                                                    \
            goto bail;                                                       \
        }                                                                    \
    } while (0)

/* ------------------------------------------------------------------------- */
#define bail_force_quiet(error)                                              \
    do {                                                                     \
        err = (error);                                                       \
        bail_quiet_debug();                                                  \
        goto bail;                                                           \
    } while (0)


/* ------------------------------------------------------------------------- */
#define bail_web_error_quiet(web_data)                                       \
    do {                                                                     \
        if (web_result_has_error(web_data)) {                                \
            goto bail;                                                       \
        }                                                                    \
    } while (0)


/*
 * The "prechecked" variants below are like their normal counterparts,
 * except the argument is already known to trigger an error condition,
 * and so does not need to be checked again.  The arguments to the _null
 * and _require forms are optional, but may later be used to described
 * the failure, and so are recommended.  These macros are largely only
 * useful in very performance sensitive settings, and so are not
 * recommended unless proven helpful by profiling.
 */

/* ------------------------------------------------------------------------- */
#define complain_prechecked_error(error)                                     \
    do {                                                                     \
        bail_log_error(BAIL_SRC_LOCATION_ARGS, (error));                     \
        bail_debug();                                                        \
    } while (0)

/* ------------------------------------------------------------------------- */
#define complain_prechecked_null(ptr)                                        \
    do {                                                                     \
        bail_log_null(BAIL_SRC_LOCATION_ARGS);                               \
        bail_debug();                                                        \
    } while (0)

/* ------------------------------------------------------------------------- */
#define complain_prechecked_require(cond)                                    \
    do {                                                                     \
        bail_log_required(BAIL_SRC_LOCATION_ARGS);                           \
        bail_debug();                                                        \
    } while (0)

/* ------------------------------------------------------------------------- */
#define complain_prechecked_require_quiet(cond)                              \
    do {                                                                     \
        bail_quiet_debug();                                                  \
    } while (0)


/* ------------------------------------------------------------------------- */
/** Called every time a bail...() or complain...() test triggers,
 * except for the ...quiet() variants.  Does nothing.  Useful because you
 * can set a breakpoint here in gdb and get stopped any time anything
 * unexpected happens.
 */
void bail_debug(void);

/* ------------------------------------------------------------------------- */
/** Called every time a bail...quiet() test triggers.  Does nothing.
 * Useful because you can set a breakpoint here in gdb and get stopped
 * any time anything unexpected happens.
 */
void bail_quiet_debug(void);

/* ------------------------------------------------------------------------- */
/** Called when various bail...() and complain...() functions need to log.
 */
void bail_log_error(const char *func, const char *file, uint32 line,
                    int error);

/* ------------------------------------------------------------------------- */
/** Called when various bail...() and complain...() functions need to log an
 * "Unexpected NULL" message.
 */
void bail_log_null(const char *func, const char *file, uint32 line);

/* ------------------------------------------------------------------------- */
/** Called when various bail...() and complain...() functions need to log an
 * "Required condition was not met" message.
 */
void bail_log_required(const char *func, const char *file, uint32 line);

/* ------------------------------------------------------------------------- */
/** Called from bail_force() to log a standard message.
 */
void bail_log_force(const char *func, const char *file, uint32 line,
                    int error);

/* ------------------------------------------------------------------------- */
/** Called from bail_log_error_errno(), etc. to log an errno-related message.
 */
void bail_log_errno(const char *func, const char *file, uint32 line,
                    const char *format, ...)
    __attribute__ ((format (printf, 4, 5)));


#ifdef __cplusplus
}
#endif

#endif /* __BAIL_H_ */
