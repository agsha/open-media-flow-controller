<?
#
#
#
#

# ==================================================
#
# Contains some basic utilities.
#
?>

<?
namespace eval tms-utils {

# ===================================================
# tms-utils::get-user
#
# returns the currently authenticated user
#
# XXX/EMT: we're not currently double-checking this against the
# trusted values from mgmtd under /mgmtd/session/current.
# We could (as the CLI does), although there is less scope for things
# to go wrong here, since these variables are set by the CGI Launcher
# with the results from the wsmd authenticate action.  So there is
# no Web UI equivalent to bug 14969.
#

namespace export get-user
proc get-user {} {
    return [tms::get-cgi-var "REMOTE_USER"]
}

namespace export get-user-local
proc get-user-local {} {
    return [tms::get-cgi-var "REMOTE_AUTH_USER"]
}

# ===================================================
# tms-utils::get-device-ip device
#
# returns the current first IPv4 address of the given device.
#
# This function is DEPRECATED and should not be used.
#

namespace export get-device-ip
proc get-device-ip {device} {
    set device_entry [exec /sbin/ifconfig $device]
    set ip_idx [expr {[string first "inet addr:" $device_entry] + 10}]
    set device_part [string range $device_entry $ip_idx end]
    set spc_idx [string first " " $device_part]
    return [string range $device_part 0 $spc_idx]
}

# ===================================================
# tms-utils::get-hostname
#
# returns the current hostname
#

namespace export get-hostname
proc get-hostname {} {
    return [exec hostname]
}


# ===================================================
# tms-utils::named-args
#
# Take an argument list and a set of defaults and 'return' an unnamed
# array with each element representing a possible command option
#

namespace export named-args
proc named-args {args defaults} {
    upvar 1 "" ""
    array set "" $defaults
    foreach {key value} $args {
        if {![info exists ($key)]} {
           error "Bad option '$key', should be one of: [lsort [array names {}]]"
        }
        set ($key) $value
    }
}


# ===================================================
# tms-utils::is-invis-user
#
# Determine if the specified username is supposed to be invisible in the UI.
#
namespace export is-invis-user
proc is-invis-user {user {root_always_invisible true}} {
    # This is mirrored from md_passwd_reserved_accts (until "root").
    foreach invs_user { \
                          "apache" \
                          "vcsa" \
                          "ntp" \
                          "sshd" \
                          "pcap" \
                          "avahi" \
                          "dbus" \
                          "haldaemon" \
                          "statsd" \
                          "nobody" \
                          "rpc" \
                          "rpcuser" \
                          "qemu" \
                          "tcpdump" \
                          "nfsnobody" \
                          "tmsresv" \
                      } {
        if {[string compare $user $invs_user] == 0} {
            return true
        }
    }
    if {[string compare $user "root"] == 0 && ($root_always_invisible == true || [string compare [tms::get-config "/auth/passwd/user/root/password"] "!!"] == 0)} {
        return true
    }
    return false
}

# ===================================================
# tms-utils::is-system-user
#
# Determine if the specified username is a "system user".
#
namespace export is-system-user
proc is-system-user {user} {
  foreach sys_user {"admin" "monitor"} {
    if {[string compare $user $sys_user] == 0} {
      return true
    }
  }
  return false
}

}

?>
