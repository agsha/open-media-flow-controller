# Kernel sysctl configuration file
#

# Controls IP packet forwarding
# Note, if you change this, you'll want to consider changing some of the
# other values below.  For example, send_redirects
net.ipv4.ip_forward = 0

# Do not accept ICMP redirect messages
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.secure_redirects = 0
net.ipv4.conf.all.secure_redirects = 0

# Do not send ICMP redirect messages
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.all.send_redirects = 0

# Controls source route verification
net.ipv4.conf.default.rp_filter = 1
net.ipv4.conf.all.rp_filter = 1

# Do not accept source routing
net.ipv4.conf.default.accept_source_route = 0
net.ipv4.conf.all.accept_source_route = 0

# When deleting the first address of an interface on a given subnet,
# don't automatically delete all of the secondary addresses.
# Instead, promote one of them (the next in line) to be the primary.
net.ipv4.conf.default.promote_secondaries = 1
net.ipv4.conf.all.promote_secondaries = 1

# Ignore all ECHO and TIMESTAMP requests via broadcast/multicast
net.ipv4.icmp_echo_ignore_broadcasts = 1

# Silently drop bogus responses to certain broadcast frames
net.ipv4.icmp_ignore_bogus_error_responses = 1

#
# Note: the following two settings:
#
#   net.bridge.bridge-nf-call-iptables
#   net.bridge.bridge-nf-call-ip6tables
#
# are set by md_iptables_apply.c, based on the corresponding config nodes:
#
#   /iptables/config/include_bridges
#   /ip6tables/config/include_bridges
# 
# They cannot be set from here because the 'bridge' kernel module is not
# loaded by the time rc.sysinit loads this sysctl.conf.
#

# Controls the System Request debugging functionality of the kernel
kernel.sysrq = 1

# Controls whether core dumps will append the PID to the core filename.
# Useful for debugging multi-threaded applications.
kernel.core_uses_pid = 1

# Controls the use of TCP syncookies
net.ipv4.tcp_syncookies = 1

# Soft and hard limits for the maximum number of entries in the ARP cache.
# These default to 512 and 1024, but are increased mainly for the benefit
# of virtualization.  Virtualization needs a larger cache because it 
# detects IP addresses of VMs by pinging every address on every active
# virtual network.
#
# The hard limit here would leave room for sixty-four /24 networks, 
# or four /20 networks.  This is expected to be large enough for 
# most applications.  The customer can increase these values further
# if necessary.  Note that we start warning the user about having
# too-large vnets somewhat before this threshold to leave some extra
# room in the ARP cache for other uses.
net.ipv4.neigh.default.gc_thresh2 = 8192
net.ipv4.neigh.default.gc_thresh3 = 16384

###################################################
# IPv6 settings
###################################################

# Disable IPv6 forwarding.
net.ipv6.conf.all.forwarding = 0
net.ipv6.conf.default.forwarding = 0

# Make sure interfaces come up without IPv6 by default, as we must first
# make sure IPv6 is admin enabled, and set any other required options
# (like about SLAAC aka accept_ra and friends).
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.all.accept_ra = 0
net.ipv6.conf.default.accept_ra = 0

# Some general IPv6 settings, to mirror our IPv4 settings above
net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.default.accept_redirects = 0
