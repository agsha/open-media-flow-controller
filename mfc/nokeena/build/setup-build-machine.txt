SCL 6.6 (Based on CentOS 6.6) based build machine setup
SCL 6.6 kernel username/password: root/juniper

Prerequisite:
- Bootstrap SCL6.6 on VM or bare metal.
  See scl6.6.R1.0.tar.gz for ISO and VM images.
- VM requirements:
    Disk 128GB 
    Memory 4GB

################################################################################
1) Do all the following when logged in as root. E.g. sudo su -
System requirements

The build machine needs to be able to create and run VMs. To verify this use the command

    virt-host-validate 

If for the test "QEMU: Checking for hardware virtualization" it prints out "WARN" then the machine is NOT set up properly.
This is only likely a problem when the build machine is a VM itself.

Also make sure that the needed kernel modules are loaded with these commands:

    modprobe kvm

################################################################################
2) Load LSI controller binary packages

  http://www.avagotech.com/support/download-search

  Search using keyword "lsiutil"
  We want version 1.62 (LSIUtil_1-62.zip) under "Management Software and Tools"
  

  http://www.avagotech.com/support/download-search
  
  Search using keyword "sas2ircu"
  We want version 12.00.00.00 (SAS2IRCU_P12/SAS2IRCU_P12.zip) under 
  "Management Software and Tools"


################################################################################
2a)Load MFC opensource distribution into /Archive
   mkdir /Archive

   Load distribution using the most convenient option (Eg. scp, nfs)

   You should have the following files (versions my be slightly different)

   # ls /Archive/
   build-machine-files.tar.gz         
   freedist-mfc-15.0.0_30595_446.tgz  
   mfc-src-30595_446.tar.gz         
   mfc-test-30595.tar.gz
   samara-bin-30595_446.tar.gz
   scl6.6.R1.0.tar.gz

   Load LSIUtil_1-62.zip and SAS2IRCU_P12.zip from 2) into /Archive

   cd /Archive
   mkdir lsiutil
   cd lsiutil
   unzip ../LSIUtil_1-62.zip 
   cd ..

   mkdir sas2ircu
   cd sas2ircu
   unzip ../SAS2IRCU_P12.zip

################################################################################
3) Base OS archive

   mkdir -p /volume/ssd-linux-storage01/repo/ssdlinux/scl6/release/6.6.R1.0
   cd /volume/ssd-linux-storage01/repo/ssdlinux/scl6/release/6.6.R1.0
   tar xzf /Archive/scl6.6.R1.0.tar.gz
   rm -rf /Archive/scl6.6.R1.0.tar.gz

Once set up, this is accessible as

    /volume/ssd-linux-storage01/repo/ssdlinux/scl6/release/6.6.R1.0 

################################################################################
4) MFC build machine specific software
   cd /Archive
   mkdir build-machine-files
   cd build-machine-files
   tar xzf ../build-machine-files.tar.gz

################################################################################
5) Create (user/password: builduser/builduser) account
   useradd -m builduser
   passwd builduser

################################################################################
6) Update /root/.bashrc

Delete the aliases for rm, cp and mv from /root/.bashrc

# alias rm='rm -i'
# alias cp='cp -i'
# alias mv='mv -i'

Then re-login.

################################################################################
7) Update /etc/resolv.conf if needed.

Update /etc/resolv.conf if needed to set the nameserver and search settings.

################################################################################
8) Update timezone info if needed.

# To set the timezone to Pacific time do this:
rm /etc/localtime
ln -s /usr/share/zoneinfo/US/Pacific /etc/localtime

################################################################################
9) Update /etc/sudoers

Users to be able to build, and need certain sudo permission to do so. They must be members of the "mfc-build" group.

The customizations done by adding the files:

9a)/etc/sudoers.d/00_MediaFlow_Cmnd_Alias 
################################################################################

# Generic sudo file for SCL 6.6
# This file must be named in a way so it is parsed first in this directory.
#
Cmnd_Alias NETWORKING=/sbin/route,/sbin/ifconfig,/bin/ping,/sbin/dhclient,/usr/bin/net,/usr/bin/rfcomm,/usr/bin/wvdial,/sbin/iwconfig,/sbin/mii-tool
#
Cmnd_Alias STORAGE=/sbin/fdisk,/sbin/sfdisk,/sbin/parted,/sbin/partprobe,/bin/mount,/bin/umount
#
Cmnd_Alias DELEGATING=/bin/chown,/bin/chmod,/bin/chgrp
#
Cmnd_Alias SERVICES=/sbin/service,/sbin/chkconfig
#
Cmnd_Alias DRIVERS=/sbin/modprobe
#
Cmnd_Alias LOCATE=/usr/bin/updatedb
#
Cmnd_Alias SOFTWARE=/bin/rpm,/usr/bin/up2date,/usr/bin/yum
#
Cmnd_Alias PROCESSES=/bin/nice,/bin/kill,/usr/bin/kill,/usr/bin/killall


9b) /etc/sudoers.d/00_MediaFlow_root 
################################################################################

# Allow root to run all commands prepended with sudo.
root ALL=NOPASSWD: ALL


9c) /etc/sudoers.d/10_MediaFlow_build
################################################################################

# Sudo requirements for building MFC

# User alias for MediaFlow admins.
User_Alias MEDIAFLOW_ADMINS=builduser

# User alias for people needing build rights but are not in the group mfc-build.
# (As has happened when the user is an intern.)
# When this list is empty, comment this line out and the MEDIAFLOW_BUILDERS ALL=... line below.
#User_Alias MEDIAFLOW_BUILDERS=

Cmnd_Alias BUILDMINE=/eng/build/bin/build-samara.sh,/eng/build/bin/samara-sudo-env,/bin/kill,/usr/bin/make,/usr/bin/find,/bin/cat,/bin/chown,/usr/bin/sum,/bin/grep,/bin/rpm

Cmnd_Alias BUILDRELEASE=/bin/rm,/bin/cp,/bin/mv,/usr/bin/tee,/usr/bin/rpmbuild,/bin/tar

# Important: The Cmnd_Alias settings PROCESSES and STORAGE must already be set.
# (Such as from 00_MediaFlow_Cmdn_Alias)
#Cmnd_Alias PROCESSES=/bin/nice,/bin/kill,/usr/bin/kill,/usr/bin/killall
#Cmnd_Alias STORAGE=/sbin/fdisk,/sbin/sfdisk,/sbin/parted,/sbin/partprobe,/bin/mount,/bin/umount

# Allow the buildmfc user to run the following commands as root:
#buildmfc ALL= SETENV: NOPASSWD: BUILDMINE, BUILDRELEASE, STORAGE

# Allow MediaFlow admins to run all commands as root:
MEDIAFLOW_ADMINS ALL=SETENV: NOPASSWD: ALL

# Allow members of mfc-build unix group to run the following commands as root
#%mfc-build ALL=SETENV: NOPASSWD: BUILDMINE, PROCESSES, STORAGE, BUILDRELEASE
#MEDIAFLOW_BUILDERS ALL=SETENV: NOPASSWD: BUILDMINE, PROCESSES, STORAGE, BUILDRELEASE

# Allow the buildmfc user to run "sudo" from a cron-job.
#Defaults:buildmfc !requiretty



Make sure the files in /etc/sudoers.d are mode 440.

chmod 440 /etc/sudoers.d/*

################################################################################
10) Add needed users & groups

# Add if not already there.
groupadd -g 25 -o named
groupadd -g 48 -o apache

################################################################################
11) Entropy Setup

Turn on random number (rngd) to generate entropy for key generation on EL6.

On EL6 GnuPG needs more entropy than on EL5 to generate the keys used for signing. This will cause the build to stall when building the kernel. To avoid this, the rngd must be started.

1: Update /etc/sysconfig/rngd to set EXTRAOPTIONS this way to make it use /dev/urandom, and to do it every 20 seconds:

EXTRAOPTIONS="-r /dev/urandom -t 20"

If this proves to be insufficient, try this step as well: Specify random device in /etc/default/rng-tools:

echo HRNGDEVICE=/dev/urandom > /etc/default/rng-tools 

2. To cause it to be automatically started on build system startup, do:

chkconfig rngd on

In addition, to start the daemon immediately (without reboot), you should do

service rngd start

You should do this to make sure the daemon starts correctly.

To see what the current entropy value is run this command:

 cat /proc/sys/kernel/random/entropy_avail

It can take a minute to build up entropy. A value above 1500 is ok. 3000+ is good. Note that reading the entropy value decreased entropy.
Reconfigure tmpwatch

################################################################################
12) Update /etc/cron.daily/tmpwatch to not clean /tmp as aggressively. 
Comment out the tmpwatch of /tmp:

#CHANGE: Do not automatically clean /tmp, we want to preserve most files that people put there.
#/usr/sbin/tmpwatch "$flags" -x /tmp/.X11-unix -x /tmp/.XIM-unix \
#       -x /tmp/.font-unix -x /tmp/.ICE-unix -x /tmp/.Test-unix \
#       -X '/tmp/hsperfdata_*' 10d /tmp

################################################################################
13) Update yum configuration in 

/etc/yum.repos.d ssdlinux.repo

replace 
  [ssdlinux-release]

with the following

[ssdlinux-release]
name=ssdlinux $basearch release repo
baseurl=file:///volume/ssd-linux-storage01/repo/ssdlinux/scl6/release/6.6.R1.0/$basearch/rpm/
gpgcheck=1
enabled=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-scl
priority=1

[ssdlinux-releasei386]
name=ssdlinux i386 release repo
baseurl=file:///volume/ssd-linux-storage01/repo/ssdlinux/scl6/release/6.6.R1.0/i386/rpm/
gpgcheck=1
enabled=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-scl
priority=1


epel.repo

1. Add /etc/yum.repos.d/epel.repo if it is not there. Type "yum repolist" to see if it is there. If not do the following:
(Instructions from http://www.thegeekstuff.com/2012/06/enable-epel-repository/)

2. Download epel rpm.
For CentOS 6, download the rpm file from http://download.fedoraproject.org/pub/epel/6/i386/repoview/epel-release.html
For Example if it is http://epel.mirror.constant.com/6/i386/epel-release-6-8.noarch.rpm then do:

cd /tmp
curl -O http://epel.mirror.constant.com/6/i386/epel-release-6-8.noarch.rpm

3. - Find out the GPG key value needed by the epel package you just downloaded using the --test option. E.g.

 rpm -ivh epel-release-6-8.noarch.rpm --test

That prints out warning: epel-release-6-8.noarch.rpm: Header V3 RSA/SHA256 Signature, key ID 0608b895: NOKEY

4. - Get the key file that has that key ID and install it using rpm. Download the key file, or use a local copy:

wget https://www.fedoraproject.org/static/0608B895.txt
mv 0608B895.txt /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6

or

cp /data/thirdparty/gpg/0608B895.txt /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6

Now install it

rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6

5. - Verify that the key got installed successfully:

rpm -qa gpg-*

This should print out for example: gpg-pubkey-0608b895-4bd22942

6. - Now install the epel rpm which will enable the EPEL repository for use by yum. (http://fedoraproject.org/wiki/EPEL)

rpm -ivh epel-release-6-8.noarch.rpm

7. You might need to edit the two /etc/yum.repos.d/epel*.repo files.

    If the command yum repolist prints out and error, then:
        edit /etc/yum.repos.d/epel*.repo to switch from using mirrorlist to baseurl. 

Also note that any reference to "download.fedora.redhat.com" in any /etc/yum.repos.d/* files must be replaced with "dl.fedoraproject.org".
See http://lists.fedoraproject.org/pipermail/announce/2012-February/003040.html) 8. - Verify that the EPEL repository is enabled.

yum repolist

9. Then run "yum clean all" to make it use the new settings.

yum clean all

################################################################################
14) Get initial file info

Create file /root/TOP_LIST with the names top level directories on local filesystems we want to track changes to.

On CentOS 6.x

# cat TOP_LIST 
bin
etc
lib
lib64
opt
root
sbin
usr

Then run this script:

FL=/root/LOCAL_FILES.orig
LL=/root/LOCAL_FILES_LS.orig
SL=/root/LOCAL_FILES_SUMS.orig
cd /
find `cat /root/TOP_LIST` -type f | sort > $FL
cat $FL | xargs ls -l  > $LL
cat $FL | xargs sum    > $SL

Save rpm info

Save a list of all the installed RPMS and other files so comparisons can be done later:

D=/root/`uname -n`
mkdir $D
V=orig
rpm -qa | sort | uniq > $D/rpm-$V.list
find /lib* /*/lib*  /usr/include | sort > $D/files1-$V.list
find /usr/share /var/local /usr/local | sort > $D/files2-$V.list
ls -l /lib* /*/lib* | sort > $D/ls-$V.list

################################################################################
15) libatomic_ops-devel

Install the atomic-ops RPM that installs the necessary header files and libraries. Then remove one file:

    /usr/lib64/libatomic_ops_gpl.a 

That has GPL code that we do not use, so remove it to make sure we are not using it.

The current version of the RPM is : libatomic_ops-devel-1.2-2.el5.x86_64.rpm

Currently the RPM is in /Archive/build-machine-files/rpm/libatomic_ops-devel-1.2-2.el5.x86_64.rpm

rpm -ivh /Archive/build-machine-files/rpm/libatomic_ops-devel-1.2-2.el5.x86_64.rpm
rm -f /usr/lib64/libatomic_ops_gpl.a

These are the files installed from the RPM:

/usr/include/atomic_ops
/usr/include/atomic_ops.h
/usr/include/atomic_ops/generalize-small.h
/usr/include/atomic_ops/generalize.h
/usr/include/atomic_ops/sysdeps
/usr/include/atomic_ops/sysdeps/README
/usr/include/atomic_ops/sysdeps/acquire_release_volatile.h
/usr/include/atomic_ops/sysdeps/aligned_atomic_load_store.h
/usr/include/atomic_ops/sysdeps/all_acquire_release_volatile.h
/usr/include/atomic_ops/sysdeps/all_aligned_atomic_load_store.h
/usr/include/atomic_ops/sysdeps/all_atomic_load_store.h
/usr/include/atomic_ops/sysdeps/ao_t_is_int.h
/usr/include/atomic_ops/sysdeps/atomic_load_store.h
/usr/include/atomic_ops/sysdeps/char_acquire_release_volatile.h
/usr/include/atomic_ops/sysdeps/char_atomic_load_store.h
/usr/include/atomic_ops/sysdeps/emul_cas.h
/usr/include/atomic_ops/sysdeps/gcc
/usr/include/atomic_ops/sysdeps/gcc/alpha.h
/usr/include/atomic_ops/sysdeps/gcc/arm.h
/usr/include/atomic_ops/sysdeps/gcc/cris.h
/usr/include/atomic_ops/sysdeps/gcc/hppa.h
/usr/include/atomic_ops/sysdeps/gcc/ia64.h
/usr/include/atomic_ops/sysdeps/gcc/m68k.h
/usr/include/atomic_ops/sysdeps/gcc/powerpc.h
/usr/include/atomic_ops/sysdeps/gcc/s390.h
/usr/include/atomic_ops/sysdeps/gcc/sparc.h
/usr/include/atomic_ops/sysdeps/gcc/x86.h
/usr/include/atomic_ops/sysdeps/gcc/x86_64.h
/usr/include/atomic_ops/sysdeps/generic_pthread.h
/usr/include/atomic_ops/sysdeps/hpc
/usr/include/atomic_ops/sysdeps/hpc/hppa.h
/usr/include/atomic_ops/sysdeps/hpc/ia64.h
/usr/include/atomic_ops/sysdeps/ibmc
/usr/include/atomic_ops/sysdeps/ibmc/powerpc.h
/usr/include/atomic_ops/sysdeps/icc
/usr/include/atomic_ops/sysdeps/icc/ia64.h
/usr/include/atomic_ops/sysdeps/int_acquire_release_volatile.h
/usr/include/atomic_ops/sysdeps/int_aligned_atomic_load_store.h
/usr/include/atomic_ops/sysdeps/int_atomic_load_store.h
/usr/include/atomic_ops/sysdeps/msftc
/usr/include/atomic_ops/sysdeps/msftc/x86.h
/usr/include/atomic_ops/sysdeps/ordered.h
/usr/include/atomic_ops/sysdeps/ordered_except_wr.h
/usr/include/atomic_ops/sysdeps/read_ordered.h
/usr/include/atomic_ops/sysdeps/short_acquire_release_volatile.h
/usr/include/atomic_ops/sysdeps/short_aligned_atomic_load_store.h
/usr/include/atomic_ops/sysdeps/short_atomic_load_store.h
/usr/include/atomic_ops/sysdeps/standard_ao_double_t.h
/usr/include/atomic_ops/sysdeps/sunc
/usr/include/atomic_ops/sysdeps/sunc/sparc.h
/usr/include/atomic_ops/sysdeps/test_and_set_t_is_ao_t.h
/usr/include/atomic_ops/sysdeps/test_and_set_t_is_char.h
/usr/include/atomic_ops_malloc.h
/usr/include/atomic_ops_stack.h
/usr/lib64/libatomic_ops.a
/usr/lib64/libatomic_ops_gpl.a
/usr/share/doc/libatomic_ops-devel-1.2
/usr/share/doc/libatomic_ops-devel-1.2/AUTHORS
/usr/share/doc/libatomic_ops-devel-1.2/COPYING
/usr/share/doc/libatomic_ops-devel-1.2/ChangeLog
/usr/share/doc/libatomic_ops-devel-1.2/INSTALL
/usr/share/doc/libatomic_ops-devel-1.2/NEWS
/usr/share/doc/libatomic_ops-devel-1.2/README
/usr/share/libatomic_ops
/usr/share/libatomic_ops/COPYING
/usr/share/libatomic_ops/LICENSING.txt
/usr/share/libatomic_ops/README.txt
/usr/share/libatomic_ops/README_malloc.txt
/usr/share/libatomic_ops/README_stack.txt
/usr/share/libatomic_ops/README_win32.txt

################################################################################
16) squashfs-tools

The 4.0 or later version of squashfs is needed to be installed on the build machine. SCL6.5 already has this installed.
expect

SCL6.5 already has this installed.
qemu-kvm, python-virtinst

    qemu-kvm is needed to run KVM virtual machines. SCL6.6 already has this installed.
    python-virtinst is needed to create the kvm image from the mfc installation iso. SCL6.5 already has this installed.
    Check to see if libvirtd is running. If not, use "service libvirtd restart". 

rpm -qa | grep qemu-kvm
rpm -qa | grep python-virtinst
rpm -qa | grep libvirt-python
service libvirtd status

SCL 6.6 has these installed: (from /volume/ssd-linux-storage01/repo/ssdlinux/scl6/release/6.6.R1.0/x86_64/rpm/ )

    libvirt-python-0.10.2-46.SCLC6_6.3.R1.0.1.x86_64.rpm
    python-virtinst-0.600.0-24.SCLC6_6.R1.0.1.noarch.rpm
    qemu-kvm-0.12.1.2-2.448.SCLC6_6.R1.0.1.x86_64.rpm 

################################################################################
17) RPMS needed to compile qemu

yum install -y pciutils-devel
yum install -y SDL-devel
# yum install -y libjpeg-devel  # CentOS 6.3: libjpeg-devel-6b-46.el6.x86_64 is the latest version
yum install -y libjpeg-turbo-devel # CentOS 6.4. 6.5, 6.6, installs same files as libjpeg-devel on 6.3.

################################################################################
18) RPMS needed to install ncclient

To install https://github.com/Juniper/ncclient.git into a virtual python environment, install these RPMS:

yum install -y libxslt-devel
yum install -y libxslt-python

################################################################################
19) Boost RPM

Install the boost and boost-devel RPM packages. SCL 6.6

has this already installed.
yum install -y boost
yum install -y boost-devel

This also installs the dependency: libicu Boost web site: http://www.boost.org

The license is a free non-attribution style.

    License text: http://www.boost.org/LICENSE_1_0.txt
    Info page for the 1.41.0 version: http://www.boost.org/users/history/version_1_41_0.html
    Source download: http://sourceforge.net/projects/boost/files/boost/1.41.0/boost_1_41_0.tar.gz/download 

    Info page for the 1.33.1 version: http://www.boost.org/users/history/version_1_33_1.html
    Source download: http://sourceforge.net/projects/boost/files/boost/1.33.1/boost_1_33_1.tar.gz/download 

################################################################################
20) yasm

Yasm must be installed so that ffmpeg can be built.

yum install -y yasm

===============================================
Package  Arch    Version      Repository   Size
===============================================
yasm     x86_64  1.2.0-1.el6  epel        736 k  -- on CentOS 6.3,6.4,6.5

################################################################################
21) quilt

Quilt is needed to work with kernel and driver patches. This is in the "epel" repository.

yum install -y quilt

    This installs quilt-0.48-2.el6.x86_64 on CentOS 6.3,6.4,6.5,6.6 

################################################################################
22) Java + Ant

Java and Ant needs to be installed in order to build MFA. SCL 6.6 has this JAVA installed:

    java-1.6.0-openjdk-devel-1.6.0.34-1.13.6.1.SCLC6_6.R1.0.1.x86_64 

Determine the directory for JAVA_HOME setting

 J=`rpm -ql java-1.6.0-openjdk-devel | grep bin/javac`
 K=`dirname $J`
 JAVA_HOME=`dirname $K`
 echo JAVA_HOME=$JAVA_HOME

################################################################################
23) Install Ant and determine ANT_HOME

cd /var/local
tar zxvf /Archive/build-machine-files/bin/apache-ant-1.8.2-bin.tar.gz
ANT_HOME=/var/local/apache-ant-1.8.2

################################################################################
24) Install Ant-Contrib

mkdir /tmp/ant-contrib
cd /tmp/ant-contrib
unzip /Archive/build-machine-files/bin/ant-contrib-0.6-bin.zip
cp lib/ant*jar ${ANT_HOME}/lib

Then add to /etc/profile right after the after the "export PATH ..." line

# Added:
# vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
JAVA_HOME=/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.34.x86_64
export JAVA_HOME
pathmunge ${JAVA_HOME}/bin after
ANT_HOME=/var/local/apache-ant-1.8.2
export ANT_HOME
pathmunge ${ANT_HOME}/bin after
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

################################################################################
25) ncurses-static

ncurses-static is needed on CentOS 6.4 for building grub.

yum -y install ncurses-static

gnu-efi

gnu-efi is needed on CentOS 6.4+ for building grub.

yum -y install gnu-efi

################################################################################
26) numactl-devel

The NUMA packages numad, numactl and numactl-devel need to be installed for building PR_RING.

Normally numad and numactl are already installed, so to install numactl-devel use yum:

yum install numactl-devel

################################################################################
27) Modified glib2 RPM

We have modified the glib2 library to support the functionality to control the default stack size of thread pool.

We need to have glib2 and glib2-devel installed.

The Wiki page following describes the process to modify the glib2 RPM:

    How to modify glib2 RPM 

Note: SCL 6.6 uses glib2-2.28.8-4.SCLC6_6.R1.0.1.src.rpm

The modified new RPMs that match are in the following location:

cd /Archive/build-machine-files/rpm/glib2-2.28.8-4.SCLC6_6.R1.0.1-modified-436
rpm -Uvh --force glib2-2.28.8-4.SCLC6_6.R1.0.1_mfc.1.x86_64.rpm glib2-devel-2.28.8-4.SCLC6_6.R1.0.1_mfc.1.x86_64.rpm
#rpm -ivh --force glib2-static-2.28.8-4.SCLC6_6.R1.0.1_mfc.1.x86_64.rpm
#rpm -ivh --force glib2-debuginfo-2.28.8-4.SCLC6_6.R1.0.1_mfc.1.x86_64.rpm

The same modified glib2 rpm must also be put into the Samara source, including the patch file used

################################################################################
28) RPM lists

Create a list of the RPMs and other installed files at this point.

D=${HOME}/`uname -n`
V=mid
rpm -qa | sort | uniq > $D/rpm-$V.list
find /lib* /*/lib* /usr/include | sort > $D/files1-$V.list
find /usr/share /var/local /usr/local | sort > $D/files2-$V.list
ls -l /lib* /*/lib* > $D/ls-$V.list

################################################################################
29) Lisp

Lisp is needed to build the Qosmos DPI library.

CLISP project page and source

    http://sourceforge.net/projects/clisp/
    http://sourceforge.net/projects/clisp/files/latest/download
    http://downloads.sourceforge.net/project/clisp/clisp/2.49/clisp-2.49.tar.bz2?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fclisp%2F&ts=1401825126&use_mirror=softlayer-dal
Local copy /Archive/build-machine-files/src/clisp/clisp-2.49.tar.bz2

################################################################################
30) Libsigsegv is required to properly build Lisp

    It is from http://ftp.gnu.org/pub/gnu/libsigsegv/libsigsegv-2.8.tar.gz
      Local copy /Archive/build-machine-files/src/libsigsegv/libsigsegv-2.8.tar.gz

cd /tmp
PREFIX=/usr

# First extract the clisp source.
tar xf /Archive/build-machine-files/src/clisp/clisp-2.49.tar.bz2
cd clisp-2.49/

# Now get the libsigsegv source.
mkdir tools
cd tools
LIBSIGSEGV_PREFIX=/usr
tar xfz /Archive/build-machine-files/src/libsigsegv/libsigsegv-2.8.tar.gz

# Configure and build libsigsegv
cd libsigsegv-2.8
./configure --prefix=${LIBSIGSEGV_PREFIX} 2>&1 | tee configure.log.txt
make         2>&1 | tee make.log.txt
make check   2>&1 | tee makecheck.log.txt
make install 2>&1 | tee makeinstall.log.txt
# This installed the following files under the prefix
#    include/sigsegv.h
#    lib/libsigsegv.a
#    lib/libsigsegv.la
ls -l ${LIBSIGSEGV_PREFIX}/include/sigsegv.h ${LIBSIGSEGV_PREFIX}/lib/libsigsegv.*

# Move back to the top directory.
pwd
cd ../..
pwd
# Now configure clisp.
rm -f src/config.cache
./configure --with-libsigsegv-prefix=${LIBSIGSEGV_PREFIX} --prefix=${PREFIX} 2>&1 | tee configure.log.txt

# If this fails then use --ignore-absence-of-libsigsegv
#./configure --ignore-absence-of-libsigsegv --prefix=${PREFIX} 2>&1 | tee configure.log.txt

# Now build
cd src
#vi config.lisp
ulimit -s 16384
make 2>&1 | tee make.log.txt

make check 2>&1 makecheck.log.txt
# Note: ignore SEGV from 'make check'

make install 2>&1 | tee install.log.txt

This installs under /usr the following files

bin/clisp
bin/clisp-link
lib/clisp-2.49/data/Symbol-Table.text
lib/clisp-2.49/data/UnicodeDataFull.txt
lib/clisp-2.49/build-aux/config.guess
lib/clisp-2.49/build-aux/config.rpath
lib/clisp-2.49/build-aux/config.sub
lib/clisp-2.49/build-aux/warn-on-use.h
lib/clisp-2.49/build-aux/arg-nonnull.h
lib/clisp-2.49/build-aux/depcomp
lib/clisp-2.49/build-aux/c++defs.h
lib/clisp-2.49/linkkit/modules.c
lib/clisp-2.49/linkkit/clisp.h
lib/clisp-2.49/linkkit/modprep.lisp
lib/clisp-2.49/base/calls.o
lib/clisp-2.49/base/lisp.a
lib/clisp-2.49/base/regexi.o
lib/clisp-2.49/base/libgnu_rx.a
lib/clisp-2.49/base/libgnu_cl.a
lib/clisp-2.49/base/makevars
lib/clisp-2.49/base/libnoreadline.a
lib/clisp-2.49/base/lisp.run
lib/clisp-2.49/base/bogomips.o
lib/clisp-2.49/base/gettext.o
lib/clisp-2.49/base/libgnu_sc.a
lib/clisp-2.49/base/lispinit.mem
lib/clisp-2.49/base/modules.h
lib/clisp-2.49/base/modules.o
share/vim/vimfiles/after/syntax/lisp.vim
share/locale/da/LC_MESSAGES/clisp.mo
share/locale/da/LC_MESSAGES/clisplow.mo
share/locale/en/LC_MESSAGES/clisp.mo
share/locale/en/LC_MESSAGES/clisplow.mo
share/locale/es/LC_MESSAGES/clisp.mo
share/locale/es/LC_MESSAGES/clisplow.mo
share/locale/nl/LC_MESSAGES/clisp.mo
share/locale/nl/LC_MESSAGES/clisplow.mo
share/locale/de/LC_MESSAGES/clisp.mo
share/locale/de/LC_MESSAGES/clisplow.mo
share/locale/fr/LC_MESSAGES/clisp.mo
share/locale/fr/LC_MESSAGES/clisplow.mo
share/locale/ru/LC_MESSAGES/clisp.mo
share/locale/ru/LC_MESSAGES/clisplow.mo
share/doc/clisp-2.49/README
share/doc/clisp-2.49/GNU-GPL
share/doc/clisp-2.49/README.de
share/doc/clisp-2.49/doc/impnotes.html
share/doc/clisp-2.49/doc/CLOS-guide.txt
share/doc/clisp-2.49/doc/clisp-link.1
share/doc/clisp-2.49/doc/clisp.ps
share/doc/clisp-2.49/doc/LISP-tutorial.txt
share/doc/clisp-2.49/doc/clisp.html
share/doc/clisp-2.49/doc/impnotes.css
share/doc/clisp-2.49/doc/clisp.1
share/doc/clisp-2.49/doc/clisp-link.ps
share/doc/clisp-2.49/doc/clisp.pdf
share/doc/clisp-2.49/doc/clisp.png
share/doc/clisp-2.49/doc/clisp-link.html
share/doc/clisp-2.49/doc/clisp-link.pdf
share/doc/clisp-2.49/COPYRIGHT
share/doc/clisp-2.49/NEWS
share/doc/clisp-2.49/SUMMARY
share/doc/clisp-2.49/MAGIC.add
share/doc/clisp-2.49/README.es
share/doc/clisp-2.49/ANNOUNCE
share/emacs/site-lisp/clisp-indent.el
share/emacs/site-lisp/clhs.el
share/emacs/site-lisp/clisp-coding.el
share/emacs/site-lisp/clisp-indent.lisp
share/emacs/site-lisp/clisp-ffi.el
share/man/man1/clisp-link.1
share/man/man1/clisp.1
share/aclocal/clisp.m4

################################################################################
31) Fuse

On SCL 6.6, fuse-2.8.3-4 can be installed using "yum".

yum install fuse fuse-libs fuse-devel

These fuse files from fuse-libs need to be installed on the MFC machine:

    ./lib64/libfuse.so.2 -> libfuse.so.2.8.3
    ./lib64/libfuse.so.2.8.3 

    # MFC requires .h(s) in /usr/local/include/fus
    cd /usr/include 
    tar cvf - fuse | ( cd /usr/local/include; tar xvf -)

################################################################################
32) Python 2.7

Python 2.7 and several python utilities need to be installed on the build machine, and a tar of some of these files also need to be installed into MFC. The python utilities are:

    setuptools
    pip
    virtualenv 

Installing these packages via 'yum' (python-setuptools, python-pip, python-virtualenv) would install them for python2.6, which is not what is wanted. So we must get the source to these and build and install them using an alternative location.
Build and Install Python 2.7.6

The source archive can be downloaded from https://www.python.org/ftp/python/2.7.6/Python-2.7.6.tgz

There is a copy of this at /Archive/build-machine-files/src/python-2.7.6/
Refer to the other files in that directory:

    About-Python-2.7.6.txt for more info about this version of Python
    License-Python-2.7.6.txt for the PSF license text. (It is NOT GPL) 


Note that we must build python on the build machine but it MUST NOT replace the default verison, 2.6.6, otherwise "yum" will break. To do this we use "make altinstall" instead of "make install".

Do this to build:

prefix=/usr
cd /tmp
tar zxf /Archive/build-machine-files/src/python-2.7.6/Python-2.7.6.tgz
cd Python-2.7.6
./configure --prefix ${prefix}
make
[ -f ${prefix}/bin/pydoc ] && mv ${prefix}/bin/pydoc ${prefix}/bin/pydoc.old
find /usr -type f | sort > /tmp/before-python.txt
make altinstall
find /usr -type f | sort > /tmp/after-python.txt
diff /tmp/before-python.txt /tmp/after-python.txt  | grep -v ${prefix}/lib/python2.7/ | grep -v ${prefix}/include/python2.7/ | grep '>'

The above diff should print out:

> /usr/bin/pydoc
> /usr/bin/python2.7
> /usr/bin/python2.7-config
> /usr/lib/libpython2.7.a
> /usr/lib/pkgconfig/python-2.7.pc
> /usr/share/man/man1/python2.7.1


For MFC, we only need to pick up /usr/bin/python2.7, /usr/lib/libpython2.7.a and the files under /usr/lib/python2.7/
Python setuptools/distribute

    CentOS now uses "distribute" instead of "setuptools". 

Download the source tarball, uncompress it, then run the install command:

    Source: https://pypi.python.org/packages/source/d/distribute/distribute-0.6.49.tar.gz
       Saved locally: /Archive/build-machine-files/src/python-utilities/distribute-0.6.49.tar.gz

cd /tmp
mkdir distribute-tmp
cd distribute-tmp
tar -xzvf /Archive/build-machine-files/src/python-utilities/distribute-0.6.49.tar.gz
cd distribute-0.6.49
find /usr/bin /usr/lib | sort > LIST.before.txt
python2.7 setup.py install
find /usr/bin /usr/lib | sort > LIST.after.txt

This installs 132 files:

    /usr/bin/easy_install
    /usr/bin/easy_install-2.7
    /usr/lib/python2.7/site-packages/distribute-0.6.49-py2.7.egg/*
    /usr/lib/python2.7/site-packages/easy-install.pth
    /usr/lib/python2.7/site-packages/setuptools-0.6c11-py2.7.egg-info
    /usr/lib/python2.7/site-packages/setuptools.pth 

################################################################################
33) Install Python pip

http://www.pip-installer.org/en/latest/installing.html

    Download https://raw.github.com/pypa/pip/master/contrib/get-pip.py
    This is saved locally: /Archive/build-machine-files/src/python-utilities/get-pip.py
    Execute: 

cd /tmp
mkdir pip-tmp
cd pip-tmp
find /usr/bin /usr/lib | sort > LIST.before.txt
python2.7 /Archive/build-machine-files/src/python-utilities/get-pip.py
find /usr/bin /usr/lib | sort > LIST.after.txt

This installs:

    /usr/bin/pip
    /usr/bin/pip2
    /usr/bin/pip2.7
    /usr/lib/python2.7/site-packages/pip/* 

################################################################################
34) Install Python virtualenv

Download the source tarball, uncompress it, then run the install command:

    Source: https://pypi.python.org/packages/source/v/virtualenv/virtualenv-1.9.1.tar.gz
    Saved locally: /Archive/build-machine-files/src/python-utilities/virtualenv-1.9.1.tar.gz

cd /tmp
mkdir virtualenv-tmp
cd virtualenv-tmp
tar -xzvf /Archive/build-machine-files/src/python-utilities/virtualenv-1.9.1.tar.gz
cd virtualenv-1.9.1
find /usr/bin /usr/lib | sort > LIST.before.txt
python2.7 setup.py install
find /usr/bin /usr/lib | sort > LIST.after.txt

This installs:

    /usr/bin/virtualenv
    /usr/bin/virtualenv-2.7
    /usr/lib/python2.7/site-packages/virtualenv-1.9.1-py2.7.egg
    /usr/lib/python2.7/site-packages/virtualenv-1.9.1-py2.7.egg/EGG-INFO
    /usr/lib/python2.7/site-packages/virtualenv-1.9.1-py2.7.egg/EGG-INFO/PKG-INFO
    /usr/lib/python2.7/site-packages/virtualenv-1.9.1-py2.7.egg/EGG-INFO/SOURCES.txt
    /usr/lib/python2.7/site-packages/virtualenv-1.9.1-py2.7.egg/EGG-INFO/dependency_links.txt
    /usr/lib/python2.7/site-packages/virtualenv-1.9.1-py2.7.egg/EGG-INFO/entry_points.txt
    /usr/lib/python2.7/site-packages/virtualenv-1.9.1-py2.7.egg/EGG-INFO/not-zip-safe
    /usr/lib/python2.7/site-packages/virtualenv-1.9.1-py2.7.egg/EGG-INFO/top_level.txt
    /usr/lib/python2.7/site-packages/virtualenv-1.9.1-py2.7.egg/virtualenv.py
    /usr/lib/python2.7/site-packages/virtualenv-1.9.1-py2.7.egg/virtualenv.pyc
    /usr/lib/python2.7/site-packages/virtualenv-1.9.1-py2.7.egg/virtualenv_support
    /usr/lib/python2.7/site-packages/virtualenv-1.9.1-py2.7.egg/virtualenv_support/__init__.py
    /usr/lib/python2.7/site-packages/virtualenv-1.9.1-py2.7.egg/virtualenv_support/__init__.pyc
    /usr/lib/python2.7/site-packages/virtualenv-1.9.1-py2.7.egg/virtualenv_support/distribute-0.6.34.tar.gz
    /usr/lib/python2.7/site-packages/virtualenv-1.9.1-py2.7.egg/virtualenv_support/pip-1.3.1.tar.gz
    /usr/lib/python2.7/site-packages/virtualenv-1.9.1-py2.7.egg/virtualenv_support/setuptools-0.6c11-py2.7.egg 

################################################################################
35) Make list of all the files installed

find /usr -type f | sort > /tmp/after-python+utils.txt

This diff shows all the utilities files installed:

diff /tmp/after-python.txt /tmp/after-python+utils.txt | grep '>'

################################################################################
36) Create tar of the files needed in MFC

Making this tar file is only needed when we need to generate one so it can be put into MFC source control when the OS version or Python or the utilties versions change.

cd /usr
tar zcvf python2.7.tgz bin/python2.7 bin/easy_install* bin/pip* bin/virtualenv* lib/libpython2.7.a lib/python2.7/

This tgz file is put in the MFC source as nokeena/src/thirdparty/binary/virtualenv/python2.7.tgz
Create virtual env tar needed in MFC

Once Python and the utilities are installed on the build machine, we need to create a virtual Python environment for use by the dpi-analyzer feature, and then tar it up so it can be put into MFC source control in the location nokeena/src/thirdparty/binary/virtualenv/. For more info see the About.txt file there.

First make sure the /opt directory exists and is writeable. Then do these commands:

cd /opt
virtualenv dpi-analyzer
cd dpi-analyzer
source bin/activate
pip install ncclient
pip install junos-eznc
deactivate 
cd ..
tar -zcf dpi-analyzer.tgz dpi-analyzer

This tgz file is put in the MFC source as nokeena/src/thirdparty/binary/virtualenv/dpi-analyzer.tgz
Cleanup special python

In case you need to re-install python2.7 and the other python items, here is the cleanup list:

/usr/lib/python2.7/
/usr/include/python2.7/
/usr/bin/2to3
/usr/bin/idle
/usr/bin/pydoc
/usr/bin/python2.7
/usr/bin/python2.7-config
/usr/bin/smtpd.py
/usr/lib/libpython2.7.a
/usr/lib/pkgconfig/python-2.7.pc
/usr/share/man/man1/python2.7.1
/usr/bin/easy_install
/usr/bin/easy_install-2.7
/usr/bin/pip
/usr/bin/pip2
/usr/bin/pip2.7 
/usr/bin/virtualenv
/usr/bin/virtualenv-2.7

################################################################################
37) Libraries

    cares
    cgic
    cprops
    curl
    GeoIP
    pcap
    openssl
    x264 


Note: The libraries c-ares and curl reference the following shared libraries:

    libldap-2.3.so.0 -> libldap-2.3.so.0.2.31 (from openldap-2*.rpm)
    liblber-2.3.so.0 -> liblber-2.3.so.0.2.31 (from openldap-2*.rpm)
    libsasl2.so.2 -> libsasl2.so.2.0.22 (from cyrus-sasl-lib-2*.rpm) 

################################################################################
38) c-ares library

Make and install 'libcares'

c-ares is a C library that performs DNS requests and name resolves asynchronously.

Download from http://c-ares.haxx.se/
Use the version that is on all the other build machines, or if there is a new version and the developers agree, then update all the build machines. It is important for all the build machines to have the same version.
There is a copy of this on /Archive/build-machine-files/src/c-ares/c-ares-1.7.1.tar.gz

    Untar c-ares-1.7.1.tar.gz into a temporary directory.
    Create the directory /tmp/ca-src and extract the tar into it like this: 

T=c-ares-1.7.1
FROM=/Archive/build-machine-files/src/c-ares
rm -rf /tmp/ca-src
mkdir /tmp/ca-src
cd /tmp/ca-src
tar zxvf ${FROM}/${T}.tar.gz

    Build and install with these commands (as root) 

cd /tmp/ca-src/c*
find * -type f | sort > BEFORE_CONFIGURE.LIST
./configure --prefix=/usr/local
find * -type f | sort > BEFORE_MAKE.LIST
make
find * -type f | sort > AFTER_MAKE.LIST
find /usr/local -type f | sort > BEFORE_INSTALL.LIST
make install
find /usr/local -type f | sort > AFTER_INSTALL.LIST
diff BEFORE_INSTALL.LIST AFTER_INSTALL.LIST
D=/root/`uname -n`
mkdir ${D}/c-ares-install
cp *.LIST ${D}/c-ares-install/

These are the files installed:

/usr/local/include/ares_build.h
/usr/local/include/ares_dns.h
/usr/local/include/ares.h
/usr/local/include/ares_rules.h
/usr/local/include/ares_version.h
/usr/local/lib/libcares.a
/usr/local/lib/libcares.la
/usr/local/lib/libcares.so.2.0.0
/usr/local/lib/pkgconfig/libcares.pc
/usr/local/share/man/man3/ares_*.3

c-ares license:

Copyright 1998 by the Massachusetts Institute of Technology.

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted, provided that
the above copyright notice appear in all copies and that both that copyright
notice and this permission notice appear in supporting documentation, and that
the name of M.I.T. not be used in advertising or publicity pertaining to
distribution of the software without specific, written prior permission.
M.I.T. makes no representations about the suitability of this software for any
purpose.  It is provided "as is" without express or implied warranty.

################################################################################
39) cgic library

Make and install 'libcgic'

cgic is an ANSI C library for CGI Programming. The version needed is 2.05.

Download from http://www.boutell.com/cgic/cgic205.tar.gz

There is a copy at /Archive/build-machine-files/src/cgic/cgic205.tar.gz 

    Unzip cgic205.tar.gz into a temporary directory.
    Build and install with these commands (as root): 

cd /tmp
tar zxvf  /Archive/build-machine-files/src/cgic/cgic205.tar.gz
cd cgic205
make
make install

These are the files installed:

/usr/local/lib/libcgic.a
/usr/local/include/cgic.h

We have purchased the Commercial License (May 2012).

The license is in the source file license.txt and also available as http://www.boutell.com/cgic/license.html

CGIC License Terms
------------------

Basic License
-------------

CGIC, copyright 1996-2011 by Thomas Boutell and Boutell.Com, Inc. Permission 
is granted to use CGIC in any application, commercial or noncommercial, at no 
cost. HOWEVER, this copyright paragraph must appear on a "credits" page 
accessible in the public online and offline documentation of the program. 
Modified versions of the CGIC library should not be distributed without 
the attachment of a clear statement regarding the author of the 
modifications, and this notice may in no case be removed. 
Modifications may also be submitted to the author for inclusion 
in the main CGIC distribution.                                 

IF YOU WOULD PREFER NOT TO ATTACH THE ABOVE NOTICE to
the public documentation of your application, consult the
information which follows regarding the availability
of a nonexclusive commercial license for CGIC.

Commercial License
------------------

The price of a nonexclusive commercial license is $200 U.S. 
To purchase the license, visit our online store here:

https://www.boutell.com/

Signed originals are available on request after purchase.

Commercial licensees are entitled to ongoing email support
and update notifications.

* * *

CGIC Nonexclusive Commercial License

The party purchasing this license is granted the right
to utilize CGIC, major version 1 or 2, any minor
version thereof, in CGI applications without the
need for a credit notice of any kind. CGI applications
developed by the holder of this license may be
distributed freely in source code or binary form
without additional fees or royalties. This license does 
not grant the right to use CGIC to create a development tool 
which passes on substantially all of the capabilities of the 
CGIC library to the user of the tool, unless that tool is 
to be used internally by the license holder only in order
to develop CGI applications. This license may not
be resold, but applications developed in accordance
with the terms of the license may be distributed
freely subject to the limitations described above.

Future minor (2.x) versions of CGIC will be covered by this
license free of charge. If significant defects of workmanship
are discovered in version 2.x, minor releases to correct them
will be made available before or at the same time that 
those defects are addressed in any future major version. 
Future "major" (3.x) versions will be available to
licensees at an upgrade price of $50.

If, for any reason, any portion of this license is found 
to be invalid, that portion of the license only
is invalidated and the remainder of the agreement
remains in effect.

################################################################################
40) cprops library

Make and install 'libcprops'

libcprops is a c prototyping tools library. Release Date: version 0.1.8 on 2007-12-15 (lastest at of 2011-04-10)

Download from http://sourceforge.net/projects/cprops/files/cprops/cprops-0.1.8/libcprops-0.1.8.zip/download

There is a copy at /Archive/build-machine-files/src/libcprops/libcprops-0.1.8.zip

    Unzip libcprops-0.1.8.zip into a temporary directory.
    Build and install with these commands: 

cd /tmp
T=libcprops-0.1.8
FROM=/Archive/build-machine-files/src/libcprops/
rm -rf /tmp/libcprops
mkdir /tmp/libcprops
cd /tmp/libcprops
unzip -d . ${FROM}/${T}.zip

    Build and install with these commands (as root) 

cd /tmp/libcprops
cd libcprops*
./configure
make
find /usr/local -mount -type f | sort > BEFORE_INSTALL.LIST
make install
find /usr/local -mount -type f | sort > AFTER_INSTALL.LIST
diff BEFORE_INSTALL.LIST AFTER_INSTALL.LIST

These are the files installed:

/usr/local/bin/cpsp
/usr/local/bin/cpsp-gen.sh
/usr/local/bin/cpsvc
/usr/local/bin/Makefile.cpsp
/usr/local/bin/mime.types
/usr/local/include/cprops/avl.h
/usr/local/include/cprops/client.h
/usr/local/include/cprops/collection.h
/usr/local/include/cprops/common.h
/usr/local/include/cprops/config.h
/usr/local/include/cprops/db.h
/usr/local/include/cprops/hashlist.h
/usr/local/include/cprops/hashtable.h
/usr/local/include/cprops/heap.h
/usr/local/include/cprops/httpclient.h
/usr/local/include/cprops/http.h
/usr/local/include/cprops/linked_list.h
/usr/local/include/cprops/log.h
/usr/local/include/cprops/mempool.h
/usr/local/include/cprops/mtab.h
/usr/local/include/cprops/multimap.h
/usr/local/include/cprops/nary.h
/usr/local/include/cprops/priority_list.h
/usr/local/include/cprops/rb.h
/usr/local/include/cprops/socket.h
/usr/local/include/cprops/sorted_hash.h
/usr/local/include/cprops/splay.h
/usr/local/include/cprops/str.h
/usr/local/include/cprops/thread.h
/usr/local/include/cprops/trie.h
/usr/local/include/cprops/util.h
/usr/local/include/cprops/vector.h
/usr/local/lib/libcprops.a
/usr/local/lib/libcprops.la
/usr/local/lib/libcprops.so.10.2.0
/usr/local/lib/libcprops.so.10 -> libcprops.so.10.2.0
/usr/local/lib/libcprops.so -> libcprops.so.10.2.0
/man/man3/cp_*
/man/man3/libcprops.3

The libcprops license (from the file COPYING)

		  GNU LESSER GENERAL PUBLIC LICENSE
		       Version 2.1, February 1999

################################################################################
41) curl library

Make and install 'libcurl'

curl is a command line tool for transferring data with URL syntax.

Download from http://curl.haxx.se/download/curl-7.20.0.tar.gz
There is a copy of this at /Archive/build-machine-files/src/curl/curl-7.20.0.tar.gz

    Untar curl-7.20.0.tar.gz into a temporary directory.
    Build and install with these commands: 

cd /tmp
T=curl-7.20.0
FROM=/Archive/build-machine-files/src/curl
rm -rf /tmp/curl-src
mkdir /tmp/curl-src
cd /tmp/curl-src
tar zxvf ${FROM}/${T}.tar.gz

    Build and install with these commands (as root) 

cd /tmp/curl-src/c*
find * -type f | sort > BEFORE_CONFIGURE.LIST
./configure --prefix=/usr/local --enable-ares=/usr/local
find * -type f | sort > BEFORE_MAKE.LIST
make
find * -type f | sort > AFTER_MAKE.LIST
find /usr/local -type f | sort > BEFORE_INSTALL.LIST
make install
find /usr/local -type f | sort > AFTER_INSTALL.LIST
diff BEFORE_INSTALL.LIST AFTER_INSTALL.LIST
D=/root/`uname -n`
mkdir ${D}/curl-install
cp *.LIST ${D}/curl-install/

These are the files installed:

/usr/local/bin/curl
/usr/local/bin/curl-config
/usr/local/include/curl/curlbuild.h
/usr/local/include/curl/curl.h
/usr/local/include/curl/curlrules.h
/usr/local/include/curl/curlver.h
/usr/local/include/curl/easy.h
/usr/local/include/curl/mprintf.h
/usr/local/include/curl/multi.h
/usr/local/include/curl/stdcheaders.h
/usr/local/include/curl/typecheck-gcc.h
/usr/local/include/curl/types.h
/usr/local/lib/libcurl.a
/usr/local/lib/libcurl.la
/usr/local/lib/libcurl.so.4.2.0
/usr/local/lib/pkgconfig/libcurl.pc
/usr/local/share/man/man1/curl.1
/usr/local/share/man/man1/curl-config.1
/usr/local/share/man/man3/curl_*.3
/usr/local/share/man/man3/libcurl.3
/usr/local/share/man/man3/libcurl-*.3

From the web site:

Curl and libcurl are true Open Source/Free Software and meet all definitions as such.
It means that you are free to modify and redistribute all contents of the curl
distributed archives. You may also freely use curl and libcurl in your commercial projects.
Curl and libcurl are licensed under a MIT/X derivate license, see below.

The curl license:

COPYRIGHT AND PERMISSION NOTICE
Copyright (c) 1996 - 2010, Daniel Stenberg, <daniel@haxx.se>.
All rights reserved.
Permission to use, copy, modify, and distribute this software for any purpose
with or without fee is hereby granted, provided that the above copyright
notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF THIRD PARTY RIGHTS. IN
NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of a copyright holder shall not
be used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization of the copyright holder.

################################################################################
42) GeoIP library

The GeoIP library must be installed in order to compile geodbd.

The source came from: http://geolite.maxmind.com/download/geoip/api/c/GeoIP-1.4.8.tar.gz
It is archived at /Archive/build-machine-files/src/GeoIP/GeoIP-1.4.8.tar.gz

For more info go to: http://www.maxmind.com/app/c

Extract this tar file in a new temp directory and configure, build and install it.
The MFC build must pick up the shared library (.so) put it in the MFC package.

Note: The license is LGPL, so we do NOT want to use the static libs, so we remove those.

cd /tmp
tar xvf /Archive/build-machine-files/src/GeoIP/GeoIP-1.4.8.tar.gz
cd GeoIP-1.4.8
./configure
make
make check
make install
rm -f /usr/local/lib/libGeoIP.a
rm -f /usr/local/lib/libGeoIPUpdate.a

"make install" installs:

/usr/local/bin/geoiplookup
/usr/local/bin/geoiplookup6
/usr/local/bin/geoipupdate
/usr/local/etc/GeoIP.conf
/usr/local/etc/GeoIP.conf.default
/usr/local/include/GeoIPCity.h
/usr/local/include/GeoIP.h
/usr/local/include/GeoIPUpdate.h
/usr/local/lib/libGeoIP.a (deleted)
/usr/local/lib/libGeoIP.la
/usr/local/lib/libGeoIP.so -> libGeoIP.so.1.4.8
/usr/local/lib/libGeoIP.so.1 -> libGeoIP.so.1.4.8
/usr/local/lib/libGeoIP.so.1.4.8
/usr/local/lib/libGeoIPUpdate.a (deleted)
/usr/local/lib/libGeoIPUpdate.la
/usr/local/lib/libGeoIPUpdate.so -> libGeoIPUpdate.so.0.0.0
/usr/local/lib/libGeoIPUpdate.so.0 -> libGeoIPUpdate.so.0.0.0
/usr/local/lib/libGeoIPUpdate.so.0.0.0

################################################################################
43) pcap library

Libpcap.so is a shared lib having APIs to do packet capturing(developed by tcpdump team).

    BSD License
    Version: libpcap-1.2.0
    http://www.tcpdump.org/
    http://www.tcpdump.org/beta/libpcap-1.2.0rc1.tar.gz 

The source is archived locally at /Archive/build-machine-files/src/libpcap/libpcap-1.2.0rc1.tar.gz

Extract this tar file in a new temp directory and configure, build and install it.

mkdir /tmp/libpcap-build
cd /tmp/libpcap-build
tar zxvf /Archive/build-machine-files/src/libpcap/libpcap-1.2.0rc1.tar.gz
cd libpcap-1.2.0
./configure
make
make install

Files installed (other than man pages):

/usr/local/include/pcap-bpf.h
/usr/local/include/pcap-namedb.h
/usr/local/include/pcap.h
/usr/local/include/pcap/bluetooth.h
/usr/local/include/pcap/bpf.h
/usr/local/include/pcap/ipnet.h
/usr/local/include/pcap/namedb.h
/usr/local/include/pcap/pcap.h
/usr/local/include/pcap/sll.h
/usr/local/include/pcap/usb.h
/usr/local/include/pcap/vlan.h
/usr/local/bin/pcap-config
/usr/local/lib/libpcap.a
/usr/local/lib/libpcap.so -> libpcap.so.1
/usr/local/lib/libpcap.so.1 -> libpcap.so.1.2.0
/usr/local/lib/libpcap.so.1.2.0

The MFC build must pick up the shared library (.so) put it in the MFC package.

License from the "LICENSE" file in the source:

License: BSD
 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
  
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in
     the documentation and/or other materials provided with the
     distribution.
  3. The names of the authors may not be used to endorse or promote
     products derived from this software without specific prior
     written permission.
  
THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

################################################################################
44) openssl library

The latest openssl version needs to be compiled and installed on each build machine.

    License is "OpenSSL License", which is "Apache-like".
    The source is downloaded from http://www.openssl.org/source/
    The versions that we have used are archived in:
	  /Archive/build-machine-files/src/openssl/

Get the latest source if needed and archive it there and update this list and instructions.

    https://www.openssl.org/source/openssl-1.0.1m.tar.gz (released 2015-03) 

Extract the tar file in a new temp directory and configure, build and install it.

mkdir /tmp/openssl-build
cd /tmp/openssl-build
tar zxvf /Archive/build-machine-files/src/openssl/openssl-1.0.1m.tar.gz
cd openssl-1.0.1*
./config --prefix=/usr/local/openssl --openssldir=/usr/local/openssl/openssl -fPIC
make
make install

################################################################################
45) x264 library

The x264 library must be installed in order to compile ffmpeg.

The source came from:

    ftp://ftp.videolan.org/pub/videolan/x264/snapshots/x264-snapshot-20110126-2245.tar.bz2 

It is archived at: /Archive/build-machine-files/src/x264/x264-snapshot-20110126-2245.tar.bz2

Extract this tar file in a new temp directory and configure, build and install it.

mkdir /tmp/x286-build
cd /tmp/x286-build
bunzip2 -c  /Archive/build-machine-files/src/x264/x264-snapshot-20110126-2245.tar.bz2 | tar xvf -
cd x264-snapshot-20110126-2245
./configure
make
make install

Note that the license is GPL. The ffmpeg binary is linked with this so it gets infected with GPL.
Usability

The setup done above just gets the system so that the MFC product can be built. Now configure the system to make it usable for development.


### Set up default env
### 
### Create /etc/profile.d/build-env.sh Adjust BUILD_ENV_FOR and comment for the actual Samara build environment.
### 
### For Hickory U0 build machines, create /etc/profile.d/build-env.sh with the following text:
### 
### :
### # Default settings for building Tall Maple Samara product
### # Build environment is for Samara Hickory Update 0.
### export BUILD_ENV_FOR=shickoryu0
### if [ -f /eng/rc/build-env.sh ] ; then
###   . /eng/rc/build-env.sh
### fi
### 
### For Ginkgo 0 build machines, create /etc/profile.d/build-env.sh with the following text:
### 
### :
### # Default settings for building Tall Maple Samara product
### # Build environment is for Samara Ginkgo.
### export BUILD_ENV_FOR=shickoryu0
### if [ -f /eng/rc/build-env.sh ] ; then
###   . /eng/rc/build-env.sh
### fi
### 
### Adjust /eng/rc/build-env.sh
### 
### You might need to adjust the script /eng/rc/build-env.sh when this is a new build machine.

################################################################################
46) Adjust hostname

Skip this

## Also make sure that 'hostname' returns just the hostname, and that 'domainname' returns the full domain so that the script will work.
## 
## hostname
## domainname
## 
## "hostname -f" should return the host.domain name.

################################################################################
47) MySQL

MySQL might already be installed by puppet, or from the installation CD. Make sure:

rpm -qa | grep mysql-devel

If not, then install:

yum install mysql-devel

Perl DB Module

perl-DBD-MySQL might already be installed by puppet, or from the installation CD. Make sure:

rpm -qa | grep perl-DBD-MySQL

If not, then install:

yum install perl-DBD-MySQL

################################################################################
48) Vim

Make sure these are installed:

    vim-common
    vim-enhanced 

yum install -y vim-common
yum install -y vim-enhanced

################################################################################
49) Emacs

We want emacs 23.4 or later installed. Emacs is probably already installed by puppet, or from the installation CD. See which version:

rpm -qa | grep emacs


    From: https://ftp.gnu.org/gnu/emacs/emacs-24.4.tar.gz
      Saved locally: /Archive/build-machine-files/bin/emacs-24.4.tar.gz

cd /root
#wget https://ftp.gnu.org/gnu/emacs/emacs-24.4.tar.gz
tar -xzf /Archive/build-machine-files/bin/emacs-24.4.tar.gz
cd emacs-24.4
./configure --with-xpm=no --with-jpeg=no --with-gif=no --with-tiff=no --with-png=no --with-x-toolkit=no --without-x
make
make install

That installs it as /usr/local/bin/emacs-24.4 and symlink emacs->emacs-24.4.
Remove the old version symlink from /usr/bin and make a new ones:

if [ -f /usr/local/bin/emacs-24.4 ] ; then
  cd /usr/bin
  rm -f emacs emacsclient
  ln -s /usr/local/bin/emacs-24.4 emacs
  ln -s /usr/local/bin/emacsclient emacsclient
else
  echo emacs-24.4 was not built
fi


################################################################################
50) XLSFonts

yum install -y xlsfonts

################################################################################
51) Bitmap Fonts

yum -y install bitmap-fonts

################################################################################
52) libXScrnSaver

yum -y install libXScrnSaver-devel

################################################################################
53) tk

yum -y install tk

################################################################################
54) tcl

Make sure tcl is installed:

yum -y install tcl
yum -y install tcl-devel

################################################################################
55) telnet

Make sure telnet is installed:

yum -y install telnet

################################################################################
56) RPM lists

Create a list of the RPMs and other installed files at this point.

D=${HOME}/`uname -n`
V=pre-verify
rpm -qa | sort | uniq > $D/rpm-$V.list
find /lib* /*/lib* /usr/include | sort > $D/files1-$V.list
find /usr/share /var/local /usr/local | sort > $D/files2-$V.list
ls -l /lib* /*/lib* > $D/ls-$V.list

################################################################################
57) Setup Samara

cd /
mkdir samara
cd samara
tar xzf /Archive/samara-bin-*.tar.gz
chown -R root *
chgrp -R root *

Logout of root
Login username: builduser
      password: builduser

mkdir -p mfc
cd mfc
tar xzf /Archive/mfc-src-*.tar.gz 

# Add LSI binaries
cd /home/builduser/mfc/nokeena/src/thirdparty/binary/lsiutil
cp /Archive/lsiutil/Linux/lsiutil lsiutil.32
chmod 555 lsiutil.32

cd /home/builduser/mfc/nokeena/src/thirdparty/binary/sas2ircu
cp /Archive/sas2ircu/SAS2IRCU_P12/sas2ircu_linux_x86_rel/sas2ircu sas2ircu.32
chmod 555 sas2ircu.32

#
# Set dummmy SignServer mode.
# File "mk-mfc-pkg.sh" 
#   set DUMMY_SIGNING=yes
#
vi /home/builduser/mfc/nokeena/src/release/junos_packaging/host-utils/scripts/mk-mfc-pkg.sh

sudo -s
mkdir -p /volume/buildtools/bin/
cp /home/builduser/mfc/nokeena/build/tools/sign.py /volume/buildtools/bin/

################################################################################
58) Install and update RPMS

export PROD_TARGET_HOST=X86_64
export PROD_TARGET_ARCH=X86_64
export PROD_TREE_ROOT=/samara/tree
export PROD_CUSTOMER_ROOT=/home/builduser/mfc

Do the check

As ROOT do a 'make' in $PROD_TREE_ROOT/src/release to get list of RPMs that need to be installed or updated.

cd $PROD_TREE_ROOT/src/release
make | tee /root/make1.out

The ouput prints out the yum command needed to update, e.g.:

yum install  elfutils-devel-0.137-3.el5.x86_64 mkisofs-2.01-10.7.el5.x86_64 .....

yum update  coreutils-5.97-23.el5_4.2.x86_64 cpio-2.6-23.el5_4.1.x86_64 .....

Install/update the indicated RPMs

Install or update the RPMS as indicated.

You might need to downgrade some libs: E.g.

yum downgrade libxml2-2.7.6-8.el6_3.3.x86_64 libxml2-2.7.6-8.el6_3.3.i386 libxml2-python-2.7.6-8.el6_3.3.x86_64

i686 version of some rpms are needed to build grub

If when compiling grub you get the error "C compiler cannot create executables" or "error: Failed build dependencies: /usr/lib/crt1.o is needed by grub..." you need to install some glibc and libgcc packages.

glibc-devel, glibc-static -- The i686 versions of these glibc packages are needed to build grub.

Check to see if both i686 and x86_64 versions are installed:

rpm -qa glibc-devel
rpm -qa glibc-static

To install the i686 versions do this:

yum install `rpm -qa glibc-devel  | grep x86_64 | sed /x86_64/s//i686/`
yum install `rpm -qa glibc-static | grep x86_64 | sed /x86_64/s//i686/`

libgcc -- The i686 version of libgcc is needed to build grub.

Check to see if both i686 and x86_64 versions are installed:

rpm -qa libgcc

To install the i686 version do this:

yum install `rpm -qa libgcc | grep x86_64 | sed /x86_64/s//i686/`

Check again

Do the check again (running make in src/release) to make sure all the needed RPMs are installed.

cd $PROD_TREE_ROOT/src/release
make | tee /root/make2.out

The ouput prints out the yum command needed to install, e.g.:

yum update  libacl-2.2.39-3.el5.x86_64 libacl-2.2.39-3.el5.i386 libacl-2.2.39-3.el5.x86_64

Note: You might need to do a "downgrade" instead of "update" if update does not work because the installed version is newer than the version needed. For example:

yum downgrade glibc-2.12-1.80.el6_3.5.i686   glibc-2.12-1.80.el6_3.5.x86_64 glibc-common-2.12-1.80.el6_3.5.x86_64 glibc-devel-2.12-1.80.el6_3.5.x86_64 glibc-headers-2.12-1.80.el6_3.5.x86_64 libxml2-2.7.6-8.el6_3.3.x86_64 libxml2-devel-2.7.6-8.el6_3.3.x86_64

Check again

Do the check again (running make in src/release) to make sure all the needed RPMs are installed.

cd $PROD_TREE_ROOT/src/release
make | tee /root/make3.out

Save RPM info

D=/root/`uname -n`
mkdir ${D}
V=samara
rpm -qa | sort | uniq > $D/rpm-$V.list
find /lib* /*/lib*  /usr/include | sort > $D/files1-$V.list
find /usr/share /var/local /usr/local | sort > $D/files2-$V.list
ls -l /lib* /*/lib* > $D/ls-$V.list

################################################################################
59) Start system services

The VM system needs to be started.

service libvirtd restart

Also if the build machine is a VM, then the VM needs to be configured to runs VMs.

Type this command to see what is printed:

virt-install

It should print "ERROR --name is required ...". If it prints
"ERROR Host does not support any virtualization options" then the VM is not configured correctly.


################################################################################
60) Start MFC build
# exit sudo mode
exit

cd nokeena/build
View "README.txt" for build instructions.

[EOF]
