/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 14170 $ of $
 *
 * $Id:$
 */
#ifndef JMFCNAMESPACEHTTPCLIENTTABLE_H
#define JMFCNAMESPACEHTTPCLIENTTABLE_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

/* other required module components */
    /* *INDENT-OFF*  */
config_add_mib(JUNIPER-MFC-MIB)
config_require(JUNIPER-MFC-MIB/jmfcNamespaceHttpClientTable/jmfcNamespaceHttpClientTable_interface)
config_require(JUNIPER-MFC-MIB/jmfcNamespaceHttpClientTable/jmfcNamespaceHttpClientTable_data_access)
config_require(JUNIPER-MFC-MIB/jmfcNamespaceHttpClientTable/jmfcNamespaceHttpClientTable_data_get)
config_require(JUNIPER-MFC-MIB/jmfcNamespaceHttpClientTable/jmfcNamespaceHttpClientTable_data_set)
    /* *INDENT-ON*  */

/* OID and column number definitions for jmfcNamespaceHttpClientTable */
#include "jmfcNamespaceHttpClientTable_oids.h"

/* enum definions */
#include "jmfcNamespaceHttpClientTable_enums.h"

/* *********************************************************************
 * function declarations
 */
void init_jmfcNamespaceHttpClientTable(void);
void shutdown_jmfcNamespaceHttpClientTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table jmfcNamespaceHttpClientTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * JUNIPER-MFC-MIB::jmfcNamespaceHttpClientTable is subid 2 of jmfcNamespace.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.2636.1.2.1.4.2, length: 12
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
    /*
     * TODO:101:o: |-> Review jmfcNamespaceHttpClientTable registration context.
     */
typedef netsnmp_data_list jmfcNamespaceHttpClientTable_registration;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review jmfcNamespaceHttpClientTable data context structure.
 * This structure is used to represent the data for jmfcNamespaceHttpClientTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * jmfcNamespaceHttpClientTable.
 */
typedef struct jmfcNamespaceHttpClientTable_data_s {
    
        /*
         * jmfcNamespaceHttpClientRequests(1)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   jmfcNamespaceHttpClientRequests;
    
        /*
         * jmfcNamespaceHttpClientResponses(2)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   jmfcNamespaceHttpClientResponses;
    
        /*
         * jmfcNamespaceHttpClientCacheHit(3)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   jmfcNamespaceHttpClientCacheHit;
    
        /*
         * jmfcNamespaceHttpClientCacheMiss(4)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   jmfcNamespaceHttpClientCacheMiss;
    
        /*
         * jmfcNamespaceHttpClientCachePartialHit(5)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   jmfcNamespaceHttpClientCachePartialHit;
    
        /*
         * jmfcNamespaceHttpClientInBytes(6)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   jmfcNamespaceHttpClientInBytes;
    
        /*
         * jmfcNamespaceHttpClientOutBytes(7)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   jmfcNamespaceHttpClientOutBytes;
    
        /*
         * jmfcNamespaceHttpClientConns(8)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   jmfcNamespaceHttpClientConns;
    
        /*
         * jmfcNamespaceHttpClientActiveConns(9)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   jmfcNamespaceHttpClientActiveConns;
    
        /*
         * jmfcNamespaceHttpClientIdleConns(10)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   jmfcNamespaceHttpClientIdleConns;
    
        /*
         * jmfcNamespaceHttpClientStatus2xx(11)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   jmfcNamespaceHttpClientStatus2xx;
    
        /*
         * jmfcNamespaceHttpClientStatus3xx(12)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   jmfcNamespaceHttpClientStatus3xx;
    
        /*
         * jmfcNamespaceHttpClientStatus4xx(13)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   jmfcNamespaceHttpClientStatus4xx;
    
        /*
         * jmfcNamespaceHttpClientStatus5xx(14)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   jmfcNamespaceHttpClientStatus5xx;
    
        /*
         * jmfcNamespaceHttpClient404Count(15)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   jmfcNamespaceHttpClient404Count;
    
        /*
         * jmfcNamespaceHttpClient302Count(16)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   jmfcNamespaceHttpClient302Count;
    
        /*
         * jmfcNamespaceHttpClient304Count(17)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   jmfcNamespaceHttpClient304Count;
    
        /*
         * jmfcNamespaceHttpClient206Count(18)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   jmfcNamespaceHttpClient206Count;
    
        /*
         * jmfcNamespaceHttpClient200Count(19)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   jmfcNamespaceHttpClient200Count;
    
        /*
         * jmfcNamespaceHttpClientTunBytes(20)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   jmfcNamespaceHttpClientTunBytes;
    
        /*
         * jmfcNamespaceHttpClientTunReq(21)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   jmfcNamespaceHttpClientTunReq;
    
} jmfcNamespaceHttpClientTable_data;


/*
 * TODO:120:r: |-> Review jmfcNamespaceHttpClientTable mib index.
 * This structure is used to represent the index for jmfcNamespaceHttpClientTable.
 */
typedef struct jmfcNamespaceHttpClientTable_mib_index_s {

        /*
         * jmfcNamespaceName(2)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/h
         */
   char   jmfcNamespaceName[32];
   size_t      jmfcNamespaceName_len;


} jmfcNamespaceHttpClientTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review jmfcNamespaceHttpClientTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
     *
     * BE VERY CAREFUL TO TAKE INTO ACCOUNT THE MAXIMUM
     * POSSIBLE LENGHT FOR EVERY VARIABLE LENGTH INDEX!
     * Guessing 128 - col/entry(2)  - oid len(12)
*/
#define MAX_jmfcNamespaceHttpClientTable_IDX_LEN     33


/* *********************************************************************
 * TODO:130:o: |-> Review jmfcNamespaceHttpClientTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * jmfcNamespaceHttpClientTable_rowreq_ctx pointer.
 */
typedef struct jmfcNamespaceHttpClientTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_jmfcNamespaceHttpClientTable_IDX_LEN];
    
    jmfcNamespaceHttpClientTable_mib_index        tbl_idx;
    
    jmfcNamespaceHttpClientTable_data              data;

    /*
     * flags per row. Currently, the first (lower) 8 bits are reserved
     * for the user. See mfd.h for other flags.
     */
    u_int                       rowreq_flags;

    /*
     * TODO:131:o: |   |-> Add useful data to jmfcNamespaceHttpClientTable rowreq context.
     */
    
    /*
     * storage for future expansion
     */
    netsnmp_data_list             *jmfcNamespaceHttpClientTable_data_list;

} jmfcNamespaceHttpClientTable_rowreq_ctx;

typedef struct jmfcNamespaceHttpClientTable_ref_rowreq_ctx_s {
    jmfcNamespaceHttpClientTable_rowreq_ctx *rowreq_ctx;
} jmfcNamespaceHttpClientTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
    int jmfcNamespaceHttpClientTable_pre_request(jmfcNamespaceHttpClientTable_registration * user_context);
    int jmfcNamespaceHttpClientTable_post_request(jmfcNamespaceHttpClientTable_registration * user_context,
        int rc);


    jmfcNamespaceHttpClientTable_rowreq_ctx *
                  jmfcNamespaceHttpClientTable_row_find_by_mib_index(jmfcNamespaceHttpClientTable_mib_index *mib_idx);

extern oid jmfcNamespaceHttpClientTable_oid[];
extern int jmfcNamespaceHttpClientTable_oid_size;


#include "jmfcNamespaceHttpClientTable_interface.h"
#include "jmfcNamespaceHttpClientTable_data_access.h"
#include "jmfcNamespaceHttpClientTable_data_get.h"
#include "jmfcNamespaceHttpClientTable_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif

#endif /* JMFCNAMESPACEHTTPCLIENTTABLE_H */
/** @} */
