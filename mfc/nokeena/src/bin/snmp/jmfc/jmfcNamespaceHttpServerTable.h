/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 13834 $ of $
 *
 * $Id:$
 */
#ifndef JMFCNAMESPACEHTTPSERVERTABLE_H
#define JMFCNAMESPACEHTTPSERVERTABLE_H

#ifdef __cplusplus
extern "C" {
#endif


/** @defgroup misc misc: Miscelaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

    /*
     * other required module components 
     */
    /* *INDENT-OFF*  */
config_add_mib(JUNIPER-MFC-MIB)
config_require(JUNIPER-MFC-MIB/jmfcNamespaceHttpServerTable/jmfcNamespaceHttpServerTable_interface)
config_require(JUNIPER-MFC-MIB/jmfcNamespaceHttpServerTable/jmfcNamespaceHttpServerTable_data_access)
config_require(JUNIPER-MFC-MIB/jmfcNamespaceHttpServerTable/jmfcNamespaceHttpServerTable_data_get)
config_require(JUNIPER-MFC-MIB/jmfcNamespaceHttpServerTable/jmfcNamespaceHttpServerTable_data_set)
    /* *INDENT-ON*  */

    /*
     * OID and column number definitions for jmfcNamespaceHttpServerTable 
     */
#include "jmfcNamespaceHttpServerTable_oids.h"

    /*
     * enum definions 
     */
#include "jmfcNamespaceHttpServerTable_enums.h"

    /*
     *********************************************************************
 * function declarations
 */
void init_jmfcNamespaceHttpServerTable(void);
void shutdown_jmfcNamespaceHttpServerTable(void);

    /*
     *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table jmfcNamespaceHttpServerTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * JUNIPER-MFC-MIB::jmfcNamespaceHttpServerTable is subid 3 of jmfcNamespace.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.2636.1.2.1.4.3, length: 12
*/
    /*
     *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
    /*
     * TODO:101:o: |-> Review jmfcNamespaceHttpServerTable registration context.
     */
typedef netsnmp_data_list jmfcNamespaceHttpServerTable_registration;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review jmfcNamespaceHttpServerTable data context structure.
 * This structure is used to represent the data for jmfcNamespaceHttpServerTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * jmfcNamespaceHttpServerTable.
 */
typedef struct jmfcNamespaceHttpServerTable_data_s {
    
        /*
         * jmfcNamespaceHttpServerRequests(1)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   jmfcNamespaceHttpServerRequests;
    
        /*
         * jmfcNamespaceHttpServerResponses(2)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   jmfcNamespaceHttpServerResponses;
    
        /*
         * jmfcNamespaceHttpServerInBytes(3)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   jmfcNamespaceHttpServerInBytes;
    
        /*
         * jmfcNamespaceHttpServerOutBytes(4)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   jmfcNamespaceHttpServerOutBytes;
    
        /*
         * jmfcNamespaceHttpServerConns(5)/GAUGE/ASN_GAUGE/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   jmfcNamespaceHttpServerConns;
    
        /*
         * jmfcNamespaceHttpServerActiveConns(6)/GAUGE/ASN_GAUGE/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   jmfcNamespaceHttpServerActiveConns;
    
        /*
         * jmfcNamespaceHttpServerIdleConns(7)/GAUGE/ASN_GAUGE/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   jmfcNamespaceHttpServerIdleConns;
    
        /*
         * jmfcNamespaceHttpServerStatus2xx(8)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   jmfcNamespaceHttpServerStatus2xx;
    
        /*
         * jmfcNamespaceHttpServerStatus3xx(9)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   jmfcNamespaceHttpServerStatus3xx;
    
        /*
         * jmfcNamespaceHttpServerStatus4xx(10)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   jmfcNamespaceHttpServerStatus4xx;
    
        /*
         * jmfcNamespaceHttpServerStatus5xx(11)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/w/e/r/d/h
         */
   U64   jmfcNamespaceHttpServerStatus5xx;
    
} jmfcNamespaceHttpServerTable_data;


/*
 * TODO:120:r: |-> Review jmfcNamespaceHttpServerTable mib index.
 * This structure is used to represent the index for jmfcNamespaceHttpServerTable.
 */
typedef struct jmfcNamespaceHttpServerTable_mib_index_s {

        /*
         * jmfcNamespaceName(2)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/h
         */
   char   jmfcNamespaceName[32];
   size_t      jmfcNamespaceName_len;


} jmfcNamespaceHttpServerTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review jmfcNamespaceHttpServerTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
     *
     * BE VERY CAREFUL TO TAKE INTO ACCOUNT THE MAXIMUM
     * POSSIBLE LENGHT FOR EVERY VARIABLE LENGTH INDEX!
     * Guessing 128 - col/entry(2)  - oid len(12)
*/
#define MAX_jmfcNamespaceHttpServerTable_IDX_LEN     33


    /*
     *********************************************************************
 * TODO:130:o: |-> Review jmfcNamespaceHttpServerTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * jmfcNamespaceHttpServerTable_rowreq_ctx pointer.
 */
typedef struct jmfcNamespaceHttpServerTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_jmfcNamespaceHttpServerTable_IDX_LEN];
    
    jmfcNamespaceHttpServerTable_mib_index        tbl_idx;
    
    jmfcNamespaceHttpServerTable_data              data;

    /*
     * flags per row. Currently, the first (lower) 8 bits are reserved
     * for the user. See mfd.h for other flags.
     */
    u_int                       rowreq_flags;

    /*
     * TODO:131:o: |   |-> Add useful data to jmfcNamespaceHttpServerTable rowreq context.
     */
    
    /*
     * storage for future expansion
     */
    netsnmp_data_list             *jmfcNamespaceHttpServerTable_data_list;

} jmfcNamespaceHttpServerTable_rowreq_ctx;

typedef struct jmfcNamespaceHttpServerTable_ref_rowreq_ctx_s {
    jmfcNamespaceHttpServerTable_rowreq_ctx *rowreq_ctx;
} jmfcNamespaceHttpServerTable_ref_rowreq_ctx;

    /*
     *********************************************************************
 * function prototypes
 */
    int            
        jmfcNamespaceHttpServerTable_pre_request
        (jmfcNamespaceHttpServerTable_registration * user_context);
    int            
        jmfcNamespaceHttpServerTable_post_request
        (jmfcNamespaceHttpServerTable_registration * user_context, int rc);


    jmfcNamespaceHttpServerTable_rowreq_ctx
        *jmfcNamespaceHttpServerTable_row_find_by_mib_index
        (jmfcNamespaceHttpServerTable_mib_index * mib_idx);

extern oid jmfcNamespaceHttpServerTable_oid[];
extern int jmfcNamespaceHttpServerTable_oid_size;


#include "jmfcNamespaceHttpServerTable_interface.h"
#include "jmfcNamespaceHttpServerTable_data_access.h"
#include "jmfcNamespaceHttpServerTable_data_get.h"
#include "jmfcNamespaceHttpServerTable_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif
#endif /* JMFCNAMESPACEHTTPSERVERTABLE_H */
