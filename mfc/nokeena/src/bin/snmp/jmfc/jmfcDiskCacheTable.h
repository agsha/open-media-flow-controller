/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 14170 $ of $
 *
 * $Id:$
 */
#ifndef JMFCDISKCACHETABLE_H
#define JMFCDISKCACHETABLE_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

/* other required module components */
    /* *INDENT-OFF*  */
config_add_mib(JUNIPER-MFC-MIB)
config_require(JUNIPER-MFC-MIB/jmfcDiskCacheTable/jmfcDiskCacheTable_interface)
config_require(JUNIPER-MFC-MIB/jmfcDiskCacheTable/jmfcDiskCacheTable_data_access)
config_require(JUNIPER-MFC-MIB/jmfcDiskCacheTable/jmfcDiskCacheTable_data_get)
config_require(JUNIPER-MFC-MIB/jmfcDiskCacheTable/jmfcDiskCacheTable_data_set)
    /* *INDENT-ON*  */

/* OID and column number definitions for jmfcDiskCacheTable */
#include "jmfcDiskCacheTable_oids.h"

/* enum definions */
#include "jmfcDiskCacheTable_enums.h"

/* *********************************************************************
 * function declarations
 */
void init_jmfcDiskCacheTable(void);
void shutdown_jmfcDiskCacheTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table jmfcDiskCacheTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * JUNIPER-MFC-MIB::jmfcDiskCacheTable is subid 1 of jmfcDiskCaches.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.2636.1.2.1.2.1.1, length: 13
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
    /*
     * TODO:101:o: |-> Review jmfcDiskCacheTable registration context.
     */
typedef netsnmp_data_list jmfcDiskCacheTable_registration;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review jmfcDiskCacheTable data context structure.
 * This structure is used to represent the data for jmfcDiskCacheTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * jmfcDiskCacheTable.
 */
typedef struct jmfcDiskCacheTable_data_s {
    
        /*
         * jmfcDiskCacheSerialNumber(3)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
         */
   char   jmfcDiskCacheSerialNumber[65535];
size_t      jmfcDiskCacheSerialNumber_len; /* # of char elements, not bytes */
    
        /*
         * jmfcDiskCacheName(5)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
         */
   char   jmfcDiskCacheName[65535];
size_t      jmfcDiskCacheName_len; /* # of char elements, not bytes */
    
        /*
         * jmfcDiskCacheTierType(6)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
         */
   char   jmfcDiskCacheTierType[65535];
size_t      jmfcDiskCacheTierType_len; /* # of char elements, not bytes */
    
        /*
         * jmfcDiskCacheState(7)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
         */
   char   jmfcDiskCacheState[65535];
size_t      jmfcDiskCacheState_len; /* # of char elements, not bytes */
    
        /*
         * jmfcDiskCacheBlockSize(8)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   jmfcDiskCacheBlockSize;
    
        /*
         * jmfcdiskCacheTotalSize(9)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   jmfcdiskCacheTotalSize;
    
        /*
         * jmfcDiskCacheBlocksUsed(10)/GAUGE/ASN_GAUGE/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   jmfcDiskCacheBlocksUsed;
    
        /*
         * jmfcDiskCacheFreeSpace(11)/GAUGE/ASN_GAUGE/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   jmfcDiskCacheFreeSpace;
    
} jmfcDiskCacheTable_data;


/*
 * TODO:120:r: |-> Review jmfcDiskCacheTable mib index.
 * This structure is used to represent the index for jmfcDiskCacheTable.
 */
typedef struct jmfcDiskCacheTable_mib_index_s {

        /*
         * jmfcDiskCacheIndex(1)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   jmfcDiskCacheIndex;


} jmfcDiskCacheTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review jmfcDiskCacheTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
*/
#define MAX_jmfcDiskCacheTable_IDX_LEN     1


/* *********************************************************************
 * TODO:130:o: |-> Review jmfcDiskCacheTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * jmfcDiskCacheTable_rowreq_ctx pointer.
 */
typedef struct jmfcDiskCacheTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_jmfcDiskCacheTable_IDX_LEN];
    
    jmfcDiskCacheTable_mib_index        tbl_idx;
    
    jmfcDiskCacheTable_data              data;

    /*
     * flags per row. Currently, the first (lower) 8 bits are reserved
     * for the user. See mfd.h for other flags.
     */
    u_int                       rowreq_flags;

    /*
     * TODO:131:o: |   |-> Add useful data to jmfcDiskCacheTable rowreq context.
     */
    
    /*
     * storage for future expansion
     */
    netsnmp_data_list             *jmfcDiskCacheTable_data_list;

} jmfcDiskCacheTable_rowreq_ctx;

typedef struct jmfcDiskCacheTable_ref_rowreq_ctx_s {
    jmfcDiskCacheTable_rowreq_ctx *rowreq_ctx;
} jmfcDiskCacheTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
    int jmfcDiskCacheTable_pre_request(jmfcDiskCacheTable_registration * user_context);
    int jmfcDiskCacheTable_post_request(jmfcDiskCacheTable_registration * user_context,
        int rc);

    int jmfcDiskCacheTable_rowreq_ctx_init(jmfcDiskCacheTable_rowreq_ctx *rowreq_ctx,
                                   void *user_init_ctx);
    void jmfcDiskCacheTable_rowreq_ctx_cleanup(jmfcDiskCacheTable_rowreq_ctx *rowreq_ctx);


    jmfcDiskCacheTable_rowreq_ctx *
                  jmfcDiskCacheTable_row_find_by_mib_index(jmfcDiskCacheTable_mib_index *mib_idx);

extern oid jmfcDiskCacheTable_oid[];
extern int jmfcDiskCacheTable_oid_size;


#include "jmfcDiskCacheTable_interface.h"
#include "jmfcDiskCacheTable_data_access.h"
#include "jmfcDiskCacheTable_data_get.h"
#include "jmfcDiskCacheTable_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif

#endif /* JMFCDISKCACHETABLE_H */
/** @} */
